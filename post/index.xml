<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on PIKA☆NCHI</title>
    <link>https://imfaye.me/post/</link>
    <description>Recent content in Posts on PIKA☆NCHI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Faye</copyright>
    <lastBuildDate>Sun, 15 Jan 2023 15:04:21 +0800</lastBuildDate><atom:link href="https://imfaye.me/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>我所喜欢的河濑直美</title>
      <link>https://imfaye.me/post/kawase-naomi/</link>
      <pubDate>Sun, 15 Jan 2023 15:04:21 +0800</pubDate>
      
      <guid>https://imfaye.me/post/kawase-naomi/</guid>
      <description>最近偏爱河濑直美 很久之前就想看萌之朱雀，那段时间很喜欢超8mm摄像机的影片，目测剧情觉得相当工整并没第一时间看。前段时间偶然扫过沙罗双树的剧情简介，古都，双生子，神隐，祭典，这些词的意象以及剧照都相当吸引我。看完之后就开始沉迷河濑直美。
河濑直美确实是“一生只拍一部电影”的典型，始终徘徊在身世问题左右。想起她在东大入学仪式的致辞，也说了一直一直只盯着一扇窗，这一扇窗和世界的联结又也能让她和世界上众多的人相遇。身世，原生家庭，童年，似乎很多人长久执着于这些母题，有的时候我在想，是不是就算长大以后，我们作为人类的理解力也就只能帮助我们消化自我到青春期以前的这个节点。
我无限偏爱她抒情化的空镜头，泛出的柔光、环境音、易碎的颤动感。她镜头下的静物，和静止的相片相比，动人的正是时间穿行而过的窸窣感，柔光下的树木枝叶，风摇动的粼粼的光与阴影，触碰窗沿结着的雨珠，水的滴落，碗中浸泡的青豆浮动的光泽，晾晒的衣物被吹起的摆动，空转的圆盘形衣架。有某种薄如蝉翼的果冻一般的轻颤。
被凝视着的安静的时间流淌，影像中的时间流速和现实有了同步的校正。就好像沙罗双树里俊骑单车载着夕现实里很短影像中又显得很长的那一段路。
看了早期的短片，拥抱、在世界的沉默中、蜗牛、见到天堂，觉得自己可以一直一直看下去河濑直美的短片，一直一直平静下去，一直一直落入回忆的质感。电影里最喜欢的果然还是萌之朱雀和沙罗双树。也看了澄沙之味和光，故事却远远没有散景好。
沙罗双树 喜欢这一段长长的骑行路。
沙罗节，暴雨。日光和暴雨下的舞、喊词、两旁人群的加入、压抑许久释放出的笑。
蜗牛 代表理性旁观的摄影机镜头，代表个人情感的伸手触碰。
印象深刻的是，摄像机一直正面面向祖母，靠近靠近又靠近，祖母笑了，说干嘛一直拍我，怎么不拍拍你自己。祖母笑着说，不要拍啦。祖母笑着说，我又不是很快就要死掉。
拥抱 我很喜欢日光过曝又暗下去的反复，像长时间安静站立在原地阳光被一片一片云遮挡又穿透而出，像记忆里背景光的质感。
在世界的沉默中 </description>
    </item>
    
    <item>
      <title>耶，VAE</title>
      <link>https://imfaye.me/post/vae/</link>
      <pubDate>Thu, 10 Feb 2022 23:43:59 +0000</pubDate>
      
      <guid>https://imfaye.me/post/vae/</guid>
      <description>引子 生成模型 能从可学习的概率分布中采样得到样本的模型。
在一些生成模型中，样本通过将随机的隐层变量送入网络生成得到。
自编码器 AE 自编码器通过学习从输入到隐层和从隐层到输出的映射来重建信号/图像。
目标：$X&amp;rsquo; = D_\theta(E_\phi(X)) \approx X$
$\mathop{min}\limits_{\theta, \phi} \sum\limits_{i=1}^n||D_\theta(E_\phi(X_i))-X_i||^2$，其中 ${{X_i}}_{i=1\cdots n}$ 为数据集。
自编码器并不是一种生成模型，因为它并没有定义一个概率分布，无法采样。
自编码器 → 生成模型？
我们会有一个很自然的做生成模型的想法，那就是训练一个从低维隐层变量生成观测样本的生成模型，最大化观测数据似然。
假设这个生成模型为 $G_{\theta}:\mathbb{R}^k \rightarrow \mathbb{R}^d$，其中 $k &amp;lt; d$，将隐层变量 $Z$ 映射为样本 $X$，那么其实在样本空间里几乎大部分区域 $p(X)=0$。
如果我们从样本空间看，在这个高维空间只会有非常小的一个低维空间子集 $p(X)$ 是有值的，并且我们在训练的时候其实是不知道这个子集的分布的，而其余大部分区域 $p(X)=0$，也就意味着我们很难直接优化似然。
但是有一种方法可以让我们在每一处都得到非零值，那就是在已有先验 $p(Z)$ 的条件下，定义一个有噪声的观测模型 $p_\theta(X|Z)=\mathcal{N}(X;G_\theta(Z), \eta I)$ (其中 $\eta$ 是可调整的参数，$I$ 是单位矩阵)。
所以 $p(X) = \int p(Z)p(X|Z)\mathrm{d}Z$，这个值也很难去计算，所以我们不是去优化 $p(X)$ 而是去优化 $p(X)$ 的下限（变分推断里的证据下限 ELBO，后面会证明）。
那么这其实就是 VAE 的雏形了。
变分自编码器 VAE 上面的图是 VAE 的整体思路，生成的部分也是也就是 decoder 的部分，我们会假设 $Z$ 服从一个简单的先验分布 $p(Z)$，这个分布可以是一个标准正态分布。通过 decoder 会得到高维图像空间的一个概率分布。</description>
    </item>
    
    <item>
      <title>关于熵编码</title>
      <link>https://imfaye.me/post/entropy-coding/</link>
      <pubDate>Sun, 05 Dec 2021 13:09:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/entropy-coding/</guid>
      <description>传统熵模型 算术编码 (Arithmetic Coding) 流程 （以静态模型举例）
假设有一段数据需要编码，统计里面所有的字符和出现的次数。编码从初始区间 (0, 1] 开始。 在当前区间内根据各字符概率划分子区间。 读入字符，找到该字符落入的子区间，将区间更新为该子区间，并重复 2, 3 步骤 最后得到的区间 [low, high) 中任意一个小数以二进制形式输出即得到编码的数据 例子如下：
实现细节 最后结果是一个小数，我们不能简单地用一个 double 类型去表示和计算这个小数，因为根据数据的复杂程度，这个小数可能任意长，小数点后可能会有成千上万位。
然而，小数点后的数据前几位很有可能是在过程中是可以不断提前确定的。例如如果当前区间为 [0.14432, 0.1456)，高位的 0.14 可以提前确定，14已经可以输出了。那么小数点可以向后移动两位，区间变成 [0.432, 0.56)，在此基础上进行后面的计算。这样编码区间永远保持在一个有限的精度要求上。
上述是基于十进制的，实际数字是用二进制表示的，当然原理是一样的，用十进制只是为了表述方便。
静态模型 → 自适应模型 静态模型在初始时对完整的数据统计完概率分布，之后不再更新概率分布；自适应模型随着字符的输入会不断更新概率分布。
静态模型的缺点在于：
在压缩前对信息内字符进行统计的过程会消耗大量时间。 对较长的信息，静态模型统计出的符号概率是该符号在整个信息中的出现概率，而自适应模型可以统计出某个符号在某一局部的出现概率或某个符号相对于某一上下文的出现概率，换句话说，自适应模型得到的概率分布将有利于对信息的压缩（可以说结合上下文的自适应模型的信息熵建立在更高的概率层次上，其总熵值更小），好的基于上下文的自适应模型得到的压缩结果将远远超过静态模型。 例如一段码流，某符号在前面出现概率较大而后面概率小，甚至忽大忽小，采用自适应模型就可以更好的适应这样的变动，压缩效率会比静态模型更高。主流视频编码标准如H.264/H.265都使用自适应模型。
算术编码 vs 哈夫曼编码 首先说结论，算术编码压缩效率更高，哈夫曼编码复杂度更低。
这两种编码，或者说熵编码的本质是，概率越小的字符，用更多的 bit 去表示，这反映到概率区间上就是，概率小的字符所对应的区间也小，因此这个区间的上下边际值的差值越小，为了唯一确定当前这个区间，则需要更多的数字去表示它。
哈夫曼编码由于不断地二叉，它的子区间总是 $\frac{1}{2}$ 的幂次方。而算术编码可以做到严格按照概率的大小等比例划分子区间。所以哈夫曼编码只是算术编码一种粗略的近似。
CABAC CABAC（Context-based Adaptive Binary Arithmetic Coding），CABAC 被视频标准H.264/H.265所采用。
CABAC可以分为二值化、上下文建模和二进制算术编码三个步骤。
其中上下文建模相当于把整段码流进行了再次的细分，把相同条件下的字符bin（比如块大小/亮度色度/语法元素/扫描方式/周围情况等）归属于某个context，形成一个比较独立的子队列而进行编码，其更新只与当前的状态和当前字符是否MPS有关（换句话说，只和历史该子队列编码字符和当前字符有关），而与别的子队列/字符是无关的。当然输出码字往往是根据规则而“混”在一起的。
CABAC虽然性能很好，但也存在以下几点不足：
复杂度过高，不易并行处理。存在块级依赖（左/上角的块没有码率估计/熵编码，后继块就无法得到更新后的状态，从而无法开始码率估计/熵编码）、Bin级依赖（同一个子队列的bin存在前后依赖性，后继的bin要等前面bin编完后才能得到更新后的上下文状态）以及编码的几个环节依赖，这些依赖性会影响编码器的并行实现。 计算精度问题。为简化计算，CABAC采用128个状态来近似，根据原来状态和当前符号性质查表得到下个状态。这个过程中会有一些精度的损失。另外，如果当一连串的MPS到来，状态到达62后就不会继续改变，只会“原地踏步”。换句话说，当概率到达0.01975时就不会随着符号继续变小，这样会影响压缩效率。 Context的设计问题。部分context利用频率很低，在测试中平均一帧都用不到几次，而有的context使用频率很高，需要进一步的优化。 区间编码 (Range Coding) 区间编码可以看为算术编码的一个变种，比算术编码压缩效率略小，但运算速度近乎是算术编码的两倍。
区间编码在整数（任意底）空间中进行进行计算，而算术编码的区间总是以小数的形式进行迭代。其他部分都几乎一样。
端到端熵模型 Todo&amp;hellip;</description>
    </item>
    
    <item>
      <title>图像质量评价指标(MSE, PSNR, MS-SSIM)</title>
      <link>https://imfaye.me/post/image-quality-evaluation-metrics/</link>
      <pubDate>Thu, 02 Dec 2021 23:35:47 +0000</pubDate>
      
      <guid>https://imfaye.me/post/image-quality-evaluation-metrics/</guid>
      <description>如何评价重建图像的质量：比较重建图像与原始图像的可视误差。
MSE Mean Squared Error, 均方误差
$MSE = \frac{1}{N}\sum\limits_{i=1}^{N}(x_i-y_i)^2$
两者越接近，MSE 越小。MSE 损失的范围为 0 到 ∞。
PSNR Peak Signal to Noise Ratio，峰值信噪比，即峰值信号的能量与噪声的平均能量之比，通常取 log 单位为分贝。
$PSNR = 10 log_{10}\frac{MaxValue^2}{MSE}$
从式子可以看出 PSNR 可以理解为 MSE 的另一种表达形式。与 MSE 相反的是，重建图像质量越好，PSNR 数值越大。
对于图像来说，像素点数值以量化方式保存，八比特位深的情况，取值范围为 [0, 255]，$MaxValue$ 就是 255。
SSIM MSE 与 PSNR 的问题是，在计算每个位置上的像素差异时，其结果仅与当前位置的两个像素值有关，与其它任何位置上的像素无关。这种计算差异的方式仅仅将图像看成了一个个孤立的像素点，而忽略了图像内容所包含的一些视觉特征，特别是图像的局部结构信息。而图像质量的好坏极大程度上是一个主观感受，其中结构信息对人主观感受的影响非常之大。
而 SSIM (Structural Similarity，结构相似性) 就试图解决这个问题
SSIM 由三部分组成：
亮度对比 平均灰度作为亮度测量： $\mu_x = \frac{1}{N}\sum\limits_{i=1}^{N}x_i$ 亮度对比函数： $l(x,y) = \frac{2\mu_x\mu_y + C_1}{\mu_x^2+\mu_y^2+C_1}$ 对比度对比 灰度标准差作为对比度测量： $\sigma_x={(\frac{1}{N-1}\sum\limits_{i=1}^N{(x_i-\mu_x)}^2)}^{\frac{1}{2}}$ 亮度对比函数： $c(x,y)=\frac{2\sigma_x\sigma_y+C_2}{\sigma_x^2+\sigma_y^2+C_2}$ 结构对比 结构测量： $\frac{x-\mu_x}{\sigma_x}$ 结构对比函数： $s(x,y) = \frac{\sigma_{xy}+C_3}{\sigma_x\sigma_y + C_3}$ SSIM 函数：</description>
    </item>
    
    <item>
      <title>AVS3 编码位流</title>
      <link>https://imfaye.me/post/avs3-bitstream/</link>
      <pubDate>Thu, 01 Apr 2021 17:28:29 +0000</pubDate>
      
      <guid>https://imfaye.me/post/avs3-bitstream/</guid>
      <description>概述 视频序列是位流的最高层语法结构。
帧由一个亮度样本矩阵和两个色度样本矩阵构成。场由构成帧的三个样本矩阵中相间的行构成。奇数行构成顶场，偶数行构成底场。
视频序列头由视频序列起码码开始，后面跟着一串编码图像数据。序列头可在位流中重复出现，称为重复序列头。使用重复序列头的主要目的是支持对视频序列的随机访问。
一副图像可以是一帧或一场，其编码数据由图像起始码开始，到序列起始码、序列结束码或下一个图像起始码结束。
片是图像中的矩形区域，包含若干最大编码单元在图像内的部分，片之间不应重叠。
图像划分为最大编码单元，最大编码单元之间不应重叠，最大编码单元左上角的样本不应超出图像边界，最大编码单元右下角的样本可超出图像边界。
最大编码单元划分为一个或多个编码单元，由编码树决定。编码单元划分为一个或多个变换块。
码流结构及语义描述 视频序列 序列头 sequence_header
视频序列起始码、档次标号、级别标号、知识位流标志、知识图像允许标志、知识位流重复序列头标志、逐行序列标志、场图像序列标志、水平尺寸、垂直尺寸、色度格式、样本精度、编码样本精度、宽高比、帧率代码、比特率低位、比特率高位、低延迟、时间层标识允许标志、位流缓冲区尺寸、最大解码图像缓冲区大小、参考图像队列 1 索引存在标志、参考图像队列相同标志、参考图像队列配置集数、默认活跃参考图像数、最大编码单元尺寸、最小编码单元尺寸、划分单元最大比例、编码树最大划分次数、最小四叉树尺寸、最大二叉树尺寸、最大扩展四叉树尺寸、加权量化允许标志、加权量化矩阵加载标志、二次变换允许标志、样值偏倚补偿允许标志、自适应修正滤波允许标志、仿射运动补偿允许标志、对称运动矢量差模式允许标志、脉冲编码调制模式允许标志、自适应运动矢量精度允许标志、候选历史运动信息数、帧内预测滤波允许标志、高级运动矢量表达模式允许标志、运动矢量精度扩展模式允许标志、色度两步预测模式允许标志、帧内衍生模式允许标志、衍生模式划分边长最大尺寸、基于位置的变换允许标志、图像重排序延迟、跨片环路滤波允许标志、片划分一致性标志、参考同位置片标志、统一片大小标志、片宽度、片高度
视频编辑码和视频序列结束码
视频编辑码 video_edit_code
紧跟其后的第一幅 I 图像后续的 B 图像可能因缺少参考图像而不能正确解码
视频序列结束码 video_sequence_end_code
标识视频序列的结束。如果 POI（显示顺序索引），如果 POI 的值大于 $(2^{32}-1)$，位流中应插入一个视频序列结束码。
参考图像队列配置集
参考知识图像标志、知识图像索引标志、被参考的知识图像索引、参考图像数、参考图像 DOI 差值绝对值、参考图像 DOI 差值符号
自定义加权量化矩阵
加权量化矩阵系数
图像 帧内预测图像头
帧内预测图像起始码、BBV 延时、时间编码标志、时间编码、解码顺序索引、知识图像索引、时间层标识、图像输出延迟、引用参考图像队列配置集标志、引用参考图像队列配置集索引、BBV 检测次数、逐行帧标志、图像编码结构标志、顶场在先、重复首场、顶场场图像标志、固定图像量化因子、去块滤波禁用标志、去块滤波参数标志、$\alpha$ 和 C 索引的偏移、$\beta$ 索引的偏移、色度量化参数禁用标志、色度量化参数增量 Cb、色度量化参数增量 Cr、图像加权量化允许标志、图像加权量化数据加载索引、加权量化参数索引、加权量化矩阵模型、加权量化参数增量 1、加权量化参数增量 2、图像自适应修正滤波允许标志
帧间预测图像头
帧间预测图像起始码、随机访问正确解码标志、图像编码方式、活跃参考图像数重载标志、活跃参考图像数、仿射预测子块尺寸标志
片
片起始码、固定片量化银子标志、片量化因子、片样值偏移补偿允许标志、高级熵编码字节对齐填充位、最大编码单元量化参数增量、样值偏移补偿合并方式索引、样值偏移补偿模式、样值偏移补偿区间模式偏移绝对值、样值偏移补偿区间模式偏移值符号值、样值偏移补偿区间模式起始偏移子区间位置、样值偏移补偿区间模式起始偏移子区间位置差、样值偏移补偿模式偏移值、样值偏移补偿边缘模式类型、最大编码单元自适应修正滤波允许标志、熵编码最大编码单元填充位、片结束码
编码树 四叉树划分标志、编码单元预测模式、二叉树扩展四叉树划分标志、二叉树扩展四叉树划分类型标志、二叉树扩展四叉树划分方向标志
编码单元 跳过模式标志、高级运动矢量表达模式标志、仿射模式标志、直接模式标志、帧内编码单元标志、基础运动矢量索引、运动矢量偏移量索引、运动矢量方向索引、仿射运动矢量索引、衍生模式划分标志、衍生模式划分方向、水平四叉衍生模式划分标志、垂直四叉衍生模式划分标志、水平非对称衍生模式标志、仿射自适应运动矢量精度索引、自适应运动矢量精度索引、编码单元子类型索引、预测参考模式、对称运动矢量差标志、运动矢量精度扩展模式标识、帧内亮度预测模式、帧内色度预测模式、帧内预测滤波标志、L0 预测单元参考索引、L0 运动矢量水平分量差绝对值、L0 运动矢量垂直分量差绝对值、L0 运动矢量水平分量差符号值、L0 运动矢量垂直分量差符号值、仿射帧间模式L0 运动矢量水平分量差绝对值、仿射帧间模式 L0 运动矢量垂直分量差绝对值、仿射帧间模式 L0 运动矢量水平分量差符号值、仿射帧间模式 L0 运动矢量垂直分量差符号值、L1&amp;hellip;、变换块系数标志、基于位置的变换块标志、Cb 变换块编码模板、Cr 变换块编码模板、亮度变换块编码模板</description>
    </item>
    
    <item>
      <title>H.265/HEVC 预测编码 笔记</title>
      <link>https://imfaye.me/post/prediction-coding/</link>
      <pubDate>Wed, 31 Mar 2021 17:04:49 +0000</pubDate>
      
      <guid>https://imfaye.me/post/prediction-coding/</guid>
      <description>视频预测编码技术 预测编码是指利用已编码的一个或几个样本值，根据某种模型或方法，对当前的样本值进行预测，并对样本真实值和预测值之间的差值进行编码。
帧内预测编码 随着离散余弦变换 (DCT) 在图像、视频编码中的广泛应用，帧内预测转为在频域进行，如相邻块 DC 系数的差分编码等。由 DCT 的性质可知，DC 系数仅能反映当前块像素值的平均大小，因此上述频域中基于 DC 系数的帧内预测无法反映出视频的纹理信息，这限制了频域帧内预测的发展。
H.264/AVC 标准中使用基于块的空域帧内预测方法，规定了若干种预测模式，每种模式都对应一种纹理方向（DC 模式除外），当前块预测像素由其预测方向上相邻块的边界重建像素生成。该方法使得编码器能根据视频内容特征自适应地选择预测模式。
H.264/AVC 使用拉格朗日率失真优化 (RDO) 进行模式选择。它为每一种模式计算其拉格朗日代价： $$ J = D + \lambda \cdot R $$ 其中，$D$ 表示当前预测模式下地失真，$R$ 表示编码当前预测模式下所有信息（如变换系数、模式细腻些、宏块划分方式等）所需的比特数。最优的预测模式不一定满足残差最小，而应指残差信号经过其他编码模块后最终的编码性能最优。
H.264/AVC 标准及后来的 FRExt 扩展层一共规定了 3 种大小的亮度帧内预测块：4 × 4、8 × 8 以及 16 × 16。其中 4 × 4 和 8 × 8 块包含 9 种预测模式，16 × 16 块包含 4 种预测模式。色度分量的帧内预测都是基于 8 × 8 大小的块进行的，也有 4 种预测模式。
帧间预测编码 帧间预测编码原理 目前主要的视频编码标准帧间预测部分都采样了基于块的运动补偿技术。其主要原理是为当前图像的每个像素块在之前已编码图像中寻找一个最佳匹配块，该过程被称为运动估计 (Motion Estimation, ME)。其中被参考的图像称为参考图像 (Reference Frame)，参考块到当前像素块的位移称为运动向量 (Motion Vector, MV)，当前像素块与参考块的差值称为预测残差 (Prediction Residual)。</description>
    </item>
    
    <item>
      <title>H.265/HEVC 编码结构 笔记</title>
      <link>https://imfaye.me/post/video-coding-structure/</link>
      <pubDate>Wed, 31 Mar 2021 11:34:13 +0000</pubDate>
      
      <guid>https://imfaye.me/post/video-coding-structure/</guid>
      <description>名词一览 GOP (Group of Pictures) - 图像组 IDR (Instantaneous Decoding Refresh) - 即时解码刷新 Slice - 片 SS (Slice Segment) - 片段 CTU (Coding Tree Unit) - 树形结构单元 CTB (Coding Tree Block) - 树形编码块 CU (Coding Unit) - 编码单元 SPS (Sequence Parameter Set) - 序列参数集 PPS (Picture Parameter Set) - 图像参数集 CVS (Coded Video Sequence) - 一个 GOP 编码后生成的压缩数据 VPS (Video Parameter Set) - 视频参数集 编码结构概述 编码结构 视频序列分隔为若干个图像组 (GOP)。
存在两种 GOP 类型：</description>
    </item>
    
    <item>
      <title>多媒体基础知识</title>
      <link>https://imfaye.me/post/multimedia-basics/</link>
      <pubDate>Mon, 29 Mar 2021 15:10:25 +0000</pubDate>
      
      <guid>https://imfaye.me/post/multimedia-basics/</guid>
      <description>图像数值表示 分辨率 分辨率的基础单位是像素。1280 * 720 P 的分辨率代表共有 1280 * 720 个像素点。
一台物理设备出厂时就已经定下了它所能拥有的最大像素点是多少。电脑显示屏调整分辨率是系统通过运算来给出模拟色彩块填充适配的。
下述像素排列方式内容为 expansion pack，可略过。
像素排列方式 标准 RGB 排列 LCD 屏幕上常采用标准 RGB 排列，会将一个像素分为 3 个子像素并排排列，通过红、绿、蓝滤色片将 LCD 背光模组的白光过滤后形成相应的 RGB 子像素排列。当需要显示不同颜色的时候，3 个子像素以不同的亮度发光，在视觉上会混合成所需要的颜色。
PenTile 排列 PenTile 排列多见于 OLED 屏幕上，因子像素呈现钻石排列而得名。PenTile 排列的每个像素由红、绿和蓝、绿子像素组合而成，绿色像素是完整的，而红蓝像素相比传统 RGB 排列各减少二分之一，子像素总数减少了约三分之一。
不像标准 RGB 排列每个像素更加独立，PenTile 排列在显示许多内容时需要借用相邻像素，显示精细内容时同分辨率下相较标准 RGB 排列的屏幕细腻度不足。
蓝色 OLED 的发光效率要比红色和绿色低，达到相同的发光强度必须使用更高的通过电流，因而蓝色像素衰减速度更快，也就会加速“烧屏”现象的产生。
YUV 表示方式 对于视频裸数据而言，更多使用 YUV 数据格式显示。
Y 表示明亮度 (Luminance / Luma)，即灰阶值 U、V 表示色度 (Chrominance / Chroma)，描述色调饱和度 亮度通过 RGB 输入信号来建立，方法是将 RGB 信号的特定部分叠加到一起。色度定义了颜色的色彩和饱和度，分别用 Cr 和 Cb 表示。Cr 表示 RGB 输入信号红色部分与 RGB 亮度值之间的差异，Cb 表示 RGB 输入信号蓝色部分与 RGB 信号亮度值之间的差异。</description>
    </item>
    
    <item>
      <title>Win10 下 Linux 子系统 (WSL) 配置小记</title>
      <link>https://imfaye.me/post/wsl/</link>
      <pubDate>Sun, 21 Mar 2021 20:29:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/wsl/</guid>
      <description>网络代理配置 刚开始用 apt-get 就被卡到。
WSL1 的时候，Linux 子系统和 Windows 主机是共享一个 localhost 的。WSL2 由于通过虚拟机实现，若要访问 Windows 主机的网络，需要使用主机的 IP 地址（IP 地址可以用 ipconfig 命令查看）。
WSL2 环境变量配置 如果是 V2rayX 的话，默认 socks5 端口是 10808，默认 http 端口是 10809。
如果是 Clash for Windows 的话，默认 socks5 端口是 7891，默认 http 端口是 7890。
以个人经验教训来说，http 和 socks5 两种代理方式可以都尝试一下。
export http_proxy = &amp;#34;socks5://&amp;lt;windows_ip&amp;gt;:&amp;lt;socks5_port&amp;gt;&amp;#34; export https_proxy = &amp;#34;socks5://&amp;lt;windows_ip&amp;gt;:&amp;lt;socks5_port&amp;gt;&amp;#34; git 也可以设置使用代理。
git config --global http.proxy &amp;#34;socks5://&amp;lt;windows_ip&amp;gt;:&amp;lt;socks5_port&amp;gt;&amp;#34; git config --global https.proxy &amp;#34;socks5://&amp;lt;windows_ip&amp;gt;:&amp;lt;socks5_port&amp;gt;&amp;#34; 当然，如果希望每次启动的时候代理配置都生效，可以写入 ~/.bashrc 文件中。
顺便一提查看 git 全局配置的命令是：</description>
    </item>
    
    <item>
      <title>一部分的日记(2019.9至2020.4)</title>
      <link>https://imfaye.me/post/dear-diary/</link>
      <pubDate>Sun, 19 Apr 2020 21:48:42 +0000</pubDate>
      
      <guid>https://imfaye.me/post/dear-diary/</guid>
      <description>果然，日记吧&amp;hellip;不是能全部坦诚相待的东西。这里只是一部分的真实的我。
2020 2020/4 4/18 晚上和爸爸妈妈一起去走南山绿道。刚下完雨，空气里完全是水汽。能闻到那种水汽的味道。天空暗下来，旁边是茂密的树林或竹林，有绿色的灯照出雾气，路上谁都没有。聊起了以前出去旅游的事情。去木桥那打手机的手电筒看一大片山谷里的杜鹃花。路上有小学经常闻的那种野花的幽香。后来回来半路又下雨了。淋了一场雨一起回家。爸爸说淋一场春雨不是很好吗。
回来之后，洗完澡一边喝牛奶一边和妈妈看快乐大本营。
我真的只想有一些这样的温馨和细小的满足就行了。像小时候一样。
4/17 想起了之前听随机波动。新闻的关注全都给了可以被数据可视化的内容。没有办法呈现出一个一目了然又蕴含爆炸性信息的东西，可能完全不会被分到注意力，也完全不会被新闻从事者所费力去挖掘。那么长的叙事，平淡的，无法给你颠覆性的视觉冲击的东西，就注定要被人忽略吗。
靥足。
4/14 上午把钢炼看完了。哭了。
后来心情还是不好。一直在看月曜。
4/13 感觉好久没上课了一样。
妈妈买了很多吃的回来，还买了香水百合放在餐厅。外面阳光超好。我都有点想哭。
晚上一直在看钢炼。
4/11 晚上菊梅姐姐他们来我们家，和妮妮聊了很久，妮妮真的成熟了好多。一起看电视，名侦，柯南什么的。晚饭的时候，我还炒了刀豆丝。
说一下最近查资料有意思的事情。
总是想起那个教授说的，我们检索记忆的方式，不是倒放，而是直接抽取过去某个点。
人脑存储记忆的方式。回想是一个重构的过程。随着每次检索，都会改变。大脑对概念的优先级高于细节。
4/3 早上竟然就在床上听完了机器学习。这个老师好憨。
中午一直在看些经验视频。别的小姐姐好温柔。诚实一点。这就是你，这就是你的大学四年，你花在其他地方的时间一定也是有意义的。鸡汤如果可以拯救我一小下，我烂俗一点也无妨。
看了一些语言学的视频。
下午看了看瑞幸那事。想起之前听的剩余价值了。资本真的在侵压我们所有的生活空间的小角落，从公到私。压榨剩余价值，侵入，一切追求效率利润最大化。我还是觉得，它应当只作为被提供的选择出现，而不是强制性地挤压所有弹性空间。小商小贩，我们的个性化的充满生活气息的小角落，不得不和巨型资本融合。我们真的需要那么强的便利性吗，我们只是一味地被市场投喂，靥足之后进化出妖怪一样的欲望。
听剩余价值，这期聊足球。
英国两大工业城市，曼彻斯特，利物浦。所以曼联和利物浦一直是宿敌。
有球能力和无球能力。梅西有球能力强，C罗无球能力强。而电视转播通常视线是围绕着球的，难看见无球能力。
4/2 N号房 色情 和纸片人 和真人(可是随着以后技术的发展，纸片人的同意与否是否需要被考虑) 限制级，因为小孩子分不清虚拟和现实 想象力不能被取缔
并不是主体与主体之间的关系，对女性开的色情玩笑，本质上更期望获得同性的认同，女性只是工具，男性共同体的认同感，排除自己同性恋倾向的嫌疑，因为被男性共同体所鄙视
对了，无线键盘到了。
每天应该更有干劲一些。
4/1 今天回了江心。好久没回去过了。汽渡，过江。
烧纸，然后去姨娘家吃饭，还看了小舅还在起的新房子。
到的快递竟然有一个是之前的托福成绩单。
2020/3 3/29 不记得了。
最近一直在听indigo la end的tulip，川谷果然很厉害，那种又温暖又无法挽回的失落感。
可能在写樱花诗赛的诗。
3/28 看钢炼。
晚上妈妈带了牛肉汤和葱油饼。吃完之后一起去走南山绿道。
看远处的字。走亭廊。竞走。
3/26 昨天夜里好大的雨，好大的雷。
今天终于装修的安静了一天。
看魔兽战线。人与神共存。无理的，残酷的，可以怪罪到神和未知的事情上，不必那么痛苦。神所理解的善。还有后面提亚马特，被人类史所不需要的神。
大概可以理解一些迷惑的展开。不过画面没得说啊，我果然是氛围感控。今天本来也下着雨，有点找到那种清冷的感觉。
看见别人发了朋友圈回忆附中。啊，怎么说，当时那么有反叛精神的人也有如此传统的温情时刻吗，少年时代真的是一去不复返吗，它是作为我们的一部分隐匿在记忆里与我们共存，还是被以后的展开取代只是能找到合理的解释与去往根源的通路呢。变得正确，就变得无聊了，但也是变得靠谱成熟了。是我自己在拒绝成为独挡一面的大人吗。
晚上看完了魔兽战线，梅林的花瓣，西杜丽，安娜，小恩的天之锁。喜欢闪闪，更理解三王会谈里闪闪说的孤高了，后悔，想去拯救，对宿命的否认，对人民挣扎姿态的怜悯也就是对自己的领导和对他们的侮辱。你的善良是一种割裂，是一种软弱和逃避，也因为他始终能看见未来吧，始终把现在和未来看成一个连续的整体，肯定现在就是在肯定未来，所以无需去后悔。不过对于亚瑟来说，她的确不是自己选择去成为王的，她对每一个个体都怀抱着同情吧。
3/25 晚上妈妈回来带了淮南牛肉汤，还吃了蛋挞。满足~
最近觉得自己有进步的地方是，终于没有那么容易羡慕别人了。本来，自己不塑造自己，靠这种与外界的牵连也很脆弱吧。
3/24 依旧，装修的声音让人简直神经衰弱。有在看魔兽战线。喜欢闪闪。
上午和红叶打电话，聊天。嗯，跳出那个框子，稳固一点弥补自己觉得应该弥补的，不用太担心会和高中一样，也不用太高地期望什么。
老婆饼，榴莲酥，青团，酸奶拌香蕉。
下午后来在研究吉尔伽美什和恩齐都。后来和污妖王聊了会儿天，我完全都不知道原来新加坡现在疫情愈发严重了。有点可怕。</description>
    </item>
    
    <item>
      <title>PAT刷题记录 1038 Recover the Smallest Number</title>
      <link>https://imfaye.me/post/pat-1038/</link>
      <pubDate>Sun, 19 Apr 2020 18:13:57 +0000</pubDate>
      
      <guid>https://imfaye.me/post/pat-1038/</guid>
      <description>Recover the Smallest Number
#include &amp;lt;iostream&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;vector&amp;gt; using namespace std; vector&amp;lt;string&amp;gt; num; bool cmp1(string a, string b) { int la = a.length(), lb = b.length(); string temp; if (la == lb) return a &amp;lt;= b; else if (la &amp;lt; lb) //自己重新定义字符串比较的定义 { if (a.compare(b.substr(0, la)) == 0) { temp = b.substr(la) + a; if (temp &amp;lt;= b) return false; else return true; } else return a &amp;lt;= b; } else if (la &amp;gt; lb) { if (b.</description>
    </item>
    
    <item>
      <title>PAT刷题记录 1033 To Fill or Not to Fill</title>
      <link>https://imfaye.me/post/pat-1033/</link>
      <pubDate>Sun, 19 Apr 2020 18:03:34 +0000</pubDate>
      
      <guid>https://imfaye.me/post/pat-1033/</guid>
      <description>很有意思的一道贪心
#include &amp;lt;iostream&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;algorithm&amp;gt; using namespace std; double cmax, davg, dall; int n; struct Node { double price; double dis; }sta[505]; bool cmp1(Node a, Node b) { return a.dis &amp;lt; b.dis; } int main() { scanf(&amp;#34;%lf%lf%lf%d&amp;#34;, &amp;amp;cmax, &amp;amp;dall, &amp;amp;davg, &amp;amp;n); for (int i = 0; i &amp;lt; n; ++i) { scanf(&amp;#34;%lf%lf&amp;#34;, &amp;amp;sta[i].price, &amp;amp;sta[i].dis); } sort(sta, sta + n, cmp1); bool flag = false; double far = 0; int ns = 0; int i1 = 0; double min1 = 9999999; double cost = 0; double cnow = 0; double bestprice; while (sta[i1].</description>
    </item>
    
    <item>
      <title>语言学概论 笔记</title>
      <link>https://imfaye.me/post/linguistics/</link>
      <pubDate>Sun, 05 Apr 2020 16:44:14 +0000</pubDate>
      
      <guid>https://imfaye.me/post/linguistics/</guid>
      <description>CH1 语言能力与语言系统 易境性 动物交流的特点：在场。在场与直接经验。人类不必在场传递经验，关键在语言。通过语言传递知识与经验，不必在场。
还原生成性 基于类推原则的还原生成能力。从单词到句子，是一种创造性行为。乔姆斯基：语言是有限规则和单位生成无限的句子。
还原生成能力：通过有限的句子还原出有限的规则和单位，并通过这些单位生成无限的句子。
人类语言学习的自然还原能力。只要存在一定数量的句子，不需要人为切分，就可以还原出有限的规则和单位，生产无限的句子。(我们不必看过全部的句子，自然通过对比就实现切分)(小孩是如何自然学习语法的。成人所总结的语法未必是正确的。所以我们希望学习方法论。)
动物语言能力。呼叫或姿态大多是整体，句子有限。
任意性 语言能力在特定文化中的运用形成语言系统。核心部分：
基于任意性的符号编码能力 基于类推性的还原生成能力 区分两种基本单位的能力(体现为符号的两层性) 编码能力：能在任意性原则上把所指和能指结合成符号的能力
任意性：词的语音形式A和意义B的关系是任意的
动物语言的形式与意义之间任意性成分很少。
我们的符号系统里加入的非任意性的成分，不是语言学符号，是象征。
反对任意性原则的学说可以称为音义关联说。证据：拟声说，右文说。
拟声不是自然语音的必要条件。声音的临摹，语序的临摹，这两种临摹方式是有限的。
右文说的本质：引申
任意性，支持材料：
同一个概念在不同的语言中声音不一样 语言中有大量的虚词、抽象词无法象声 两层性 自然语言有两种最基本的单位：
音位
区别意义的单位
语素
表达意义的单位
两层性的文化功能在于用最少的区别性表达尽可能多的符号。
两层性意味着可以用有限的手段(主要是语音)产生无限的符号形式(和有限的符号产生无限的符号组合不一样)
人类自然语音从低到高有音位层、音节层、语素层、词汇层、词组层、句子层。音位系统是区别意义层，语素系统是表达意义层。
一般认为汉语中有27个音质音位。
语音是人类社会的一部分。是我们先天还是后天的能力。即使有先天的语言能力，必须有后天的交流环境，语言系统。语言学习关键期。
CH2 语言和思维 </description>
    </item>
    
    <item>
      <title>操作系统笔记 CH13 I/O Systems</title>
      <link>https://imfaye.me/post/os13/</link>
      <pubDate>Fri, 28 Feb 2020 13:13:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os13/</guid>
      <description>the kernel is structured to use device-driver modules.
device driver为IO子系统提供了统一设备访问接口
两个趋势：接口日益标准化，设备多样性
IO 硬件 port
bus
controller
Controller usually have registers, where device driver places commands, addresses, and data to write, or read data from registers after command execution. Data-in register, data-out register, status register, control register
设备有地址
Direct I/O instructions
Memory-mapped I/O 内存映射IO
设备控制寄存器 被映射到 处理器的地址空间
Especially for large address spaces (graphics)
IO端口有4种寄存器：
status control data-in data-out Techniques for Performing I/O</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH12 Mass-Storage Structure</title>
      <link>https://imfaye.me/post/os12/</link>
      <pubDate>Fri, 28 Feb 2020 13:12:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os12/</guid>
      <description>磁盘 扇区0是最外面柱面的第一个磁道的第一个扇区。映射先按磁道内扇区顺序，再按柱面内磁道顺序，最后按从外到内的柱面顺序来排序的。
Head crash results from disk head making contact with the disk surface. Cannot be repaired, the entire disk must be replaced.
Disks can be removable
Host controller in computer uses bus to talk to disk controller built into drive or storage array.
The disk controller operates the disk-drive hardware to carry out the command.
Disk controllers have a built-in cache. Data transfer at the disk drive happens between the cache and the disk surface.</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH11 File-System Implementation</title>
      <link>https://imfaye.me/post/os11/</link>
      <pubDate>Fri, 28 Feb 2020 13:11:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os11/</guid>
      <description>文件系统结构 磁盘特点：可以原地重写，可以直接访问任意一块。
内存和磁盘之间的IO以块为单位。每块为一个或多个扇区。扇区通常为512B
File system resides on secondary storage (disks) OS通过文件系统存储、定位、提取数据
IO control 最底层
由device driver 和 Interrupt handlers组成
实现内存和磁盘之间的信息传输。
device driver可作为翻译器。输入是高层命令，输出是底层的、硬件特定的命令。命令用于控制hardware controller
device driver控制一类设备
basic file system
Issue generic commands to the appropriate device driver to read and write physical blocks on the disk.
file-organization module
将逻辑块地址 转换成 物理块地址
也包括空闲空间管理器
logical file system
管理metadata，元数据包括文件系统所有结构数据，而不包括实际数据
管理目录结构
通过FCB((inodes in UNIX))维护文件结构
负责保护和安全
Layering useful for reducing complexity and redundancy, but adds overhead and can decrease performance.</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH10 File-System Interface</title>
      <link>https://imfaye.me/post/os10/</link>
      <pubDate>Fri, 28 Feb 2020 13:10:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os10/</guid>
      <description>file concept 文件：记录在外存上的 相关信息的 具有名称的 集合，逻辑内存的最小分配单元
通常，文件表示程序和数据
free form or may be formatted rigidly
file attributes name: human-readable identifier: a unique number, non-human-readable name type location size protection time, date and user identification 文件的信息存在directory中，directory也存在外存上
A directory entry consists of the file&amp;rsquo;s name and its unique id. The id in turn locates the other file attributes.
file operations 6个基本文件操作：
create
write
write pointer
read
read pointer
A per-process current-file-position pointer
reposition</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH9 Virtual Memory</title>
      <link>https://imfaye.me/post/os9/</link>
      <pubDate>Fri, 28 Feb 2020 13:09:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os9/</guid>
      <description>background CH8的内存管理方案需要将整个进程放入内存，动态载入只能减轻这一限制
Code needs to be in memory to execute, but entire program rarely used.
execute partially-loaded program
程序不受现有物理内存大小限制，可以为virtual address space编写程序 更多程序可以同时执行，CPU利用率增加，而响应时间、周转时间不增加 载入或交换程序所需IO变少，用户程序运行更快 Virtual memory – separation of user logical memory from physical memory.
动态内存分配，堆向上增长；子程序调用，栈向下增长。包括洞的虚拟地址空间是稀地址空间。
Enables sparse address spaces with holes left for growth, dynamically linked libraries, etc.
Virtual memory allows files and memory to be shared by two or more processes through page sharing.
虚拟内存实现：
demand paging demand segmentation demand paging 按需调页 Lazy swapper: never swaps a page into memory unless that page will be needed.</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH8 Main Memory</title>
      <link>https://imfaye.me/post/os8/</link>
      <pubDate>Fri, 28 Feb 2020 13:08:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os8/</guid>
      <description>background 基本硬件 CPU可直接访问的存储器只有 内存 和 处理器内的寄存器
​	CPU内置寄存器可在一个CPU时钟周期内完成访问，对于寄存器中的内容，CPU可以在一个周期内解析并执行多个指令
​	对于内存，访存可能需要多个时钟周期。没有数据时，要暂停(stall)
协调速度差异，在CPU和内存之间，增加高速缓存cache
instruction-execution cycle: Fetch an instruction, decode instruction, fetch operands, execute, store results back into memory
为了确保正确操作，需要保护内存。
每个进程有独立空间。两个寄存器：
base register: 最小的合法物理地址 limit register: 范围的大小 CPU硬件对user mode产生的每一个地址与寄存器的地址进行比较，实现内存空间的保护。
只有OS可以通过特殊的特权指令加载base register和limit register
地址绑定 address binding 进程在执行时可以在磁盘和内存之间移动，在磁盘上等待调入内存以便执行的进程形成input queue
许多系统允许用户进程放在物理内存的任意位置，用户进程开始地址不必为0
源程序中的地址用符号表示，compiler将symbolic address绑定到relocatable address(如从本模块开始的第14字节)，linker或loader将可重定位地址绑定成absolute address。每次绑定都是从一个地址空间到另一个的映射。
将指令与数据绑定到内存地址有几种情况：
compile time
编译时就知道进程将在内存中的驻留地址，可以生成absolute code
如果将来地址发生变化，必须重新编译代码
load time
编译时不知道。编译器生成relocatable code
绑定延迟到加载时
如果开始地址发生变化，只需重新加载用户代码引入改变值
execution time
进程在执行时可以从一个内存段移到另一个内存段
绑定延迟到执行时
需要硬件(如base and limit registers)
logical vs.</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH7 Deadlocks</title>
      <link>https://imfaye.me/post/os7/</link>
      <pubDate>Fri, 28 Feb 2020 13:07:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os7/</guid>
      <description>deadlock characteristics necessary conditions 4个条件同时满足，引起死锁：
mutual exclusion
至少有一个资源处于非共享模式，一次只能有一个进程使用
hold and wait
占有至少一个资源，等待另一为其他进程所占资源
no preemption
资源不能被抢占
circular wait
resource-allocation graph request edge : Pi-&amp;gt;Rj
assignment edge : Rj-&amp;gt;Pi
申请边只用指向矩形，但分配边必须从某个原点开始
资源分配图有环是死锁的必要条件。若每类资源只有一个实例，含环是充分必要条件。若同类资源数&amp;gt;1,不一定有死锁。
methods for handling deadlocks 1.预防或避免死锁
2.允许进入死锁，检测并恢复
3.忽视这个问题(为多数OS所用)
deadlock prevention: 确保至少一个必要条件不成立，通过限制如何申请资源
deadlock avoidance: 事先得到进程申请和使用资源的额外信息，系统可确定对于一个申请，进程是否等待(申请允许还是延迟)，考虑可用、已分配、进程将来申请和释放的资源
deadlock prevention 确保4个必要条件至少1个不成立
mutual exclusion
通常不通过这个条件&amp;hellip;
hold and wait
每个进程在执行前申请并获得所有资源
进程在没有资源时才可申请资源(申请更多资源前，先释放已分配的资源)
缺点:1.资源利用率低 2.starvation
no preemption
如果一个进程占有资源并申请另一个不能立即分配的资源，其现在已分配的资源都可被抢占(被隐式释放)。
进程申请资源时，不可用也不被其他等待进程占有时，等待
常应用于状态可以保存恢复的资源，如CPU寄存器和内存，不适用于打印机和磁带驱动器等。
circular wait
对所有资源类型进行完全排序。每个进程只按递增顺序申请资源。(只能申请编号比它大的)
deadlock avoidance 死锁避免比死锁预防要求低
deadlock prevention 低设备使用率和吞吐率
a system is in a safe state only if there exists a safe sequence</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH6 Process Synchronization</title>
      <link>https://imfaye.me/post/os6/</link>
      <pubDate>Fri, 28 Feb 2020 13:06:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os6/</guid>
      <description>race condition: 多个进程并发访问和操作同一数据，结果与访问顺序有关
critical section critical section: 进程可能改变共同变量，更新表，写文件的代码段
entry section: 实现请求进入其临界区的代码段
临界区问题三要求：
mutual exclusion 同一时间临界区存在一个进程 progress 如果一个进程想进入临界区，它终将成功 bounded waiting 从一个进程做出进入临界区的请求，到该请求被允许，其他进程允许进入临界区的次数有限 kernel code可能会出现race condition
两种方法: 1.preemptive kernel 2.non-preemptive kernel 抢占内核更适合real-time programming,且更responsive
Peterson&amp;rsquo;s solution software-based solution to the critical section problem 基于软件
synchronization hardware 基于硬件
特殊硬件指令 原子地(不可中断)检查、修改、交换字内容
disable interrupt, a lock
TestAndSet()
返回的是原来的值，进入过testandset，之后就变成true
实现有限等待互斥：</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH5 CPU Scheduling</title>
      <link>https://imfaye.me/post/os5/</link>
      <pubDate>Fri, 28 Feb 2020 13:05:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os5/</guid>
      <description>dispatcher: gives control of the CPU to the process selected by the short-term scheduler;
dispatch latency
scheduling criteria CPU utilization,
throughput:
单位时间完成进程数量
turnaround time:
submission to completion
waiting time:
sum of time spent in the ready queue就绪队列
response time:
submission to first response(time it takes to start responding, not the time it takes to output the response)
scheduling algorithm FCFS first-come, first-served
non-preemptive
等待时间较长
convoy effect(短进程跟在长进程后面)
SJF shortest-job-first
shortest next CPU burst</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH4 Threads</title>
      <link>https://imfaye.me/post/os4/</link>
      <pubDate>Fri, 28 Feb 2020 13:04:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os4/</guid>
      <description>Dispatching is referred to as a thread. Resource of ownership is referred to as a process or task.
对进程的swapping和termination都牵扯它所有线程
线程是CPU使用的基本单位。由thread ID, program counter, register set, stack组成
multithreading models User threads, supported above the kernel and are managed without kernel support.
Kernel threads, supported and managed directly by the operating system.
many-to-one
one-to-one
一个线程阻塞，另一个还能运行
并发。开销大。
windows, linux, solaris 9
many-to-many
用户线程映射到数量相同或更少的内核线程
When a thread performs a blocking system call, the kernel can schedule another thread for execution.</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH3 Process</title>
      <link>https://imfaye.me/post/os3/</link>
      <pubDate>Fri, 28 Feb 2020 13:03:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os3/</guid>
      <description>process concepts batch system: job; time-sharing system: program/task
Program is passive entity stored on disk (executable file), process is active.
a process includes
text section(program code) data section(global variables) heap(动态分配的内存) process stack(临时数据) function parameters, return value return addresses local variables current activity(represented by program counter and registers) process state
new: being created running: instructions are being executed waiting/limiting: waiting for some event ready: waiting to be assigned to a processor terminated/halted: finished execution 一次只有一个进程可以在一个处理器上运行，但多个进程可处于就绪或等待状态。</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH2 OS structures</title>
      <link>https://imfaye.me/post/os2/</link>
      <pubDate>Fri, 28 Feb 2020 13:01:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os2/</guid>
      <description>UI CLI command-line / command interpreter
implemented in kernel (MS-DOS)
by systems program (Windows / UNIX)
multiple flavors implemented – shells UNIX / Linux
linux shell : shell: 带形参的批命令文件
batch interface
GUI graphical user interface
desktop, icon, Xerox PARC
system calls Programming interface to the services provided by the OS
written in high-level language
Mostly accessed by programs via a high-level Application Program Interface (API) rather than direct system call use.</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH1 Intro</title>
      <link>https://imfaye.me/post/os1/</link>
      <pubDate>Fri, 28 Feb 2020 13:00:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os1/</guid>
      <description>What OS do 操作系统是管理计算机硬件的程序
computer system: hardware, operating system, application programs, users
​	hardware: CPU, memory, I/O devices
user view services provided by OS:
program development (editors and debuggers)
program execution
access to IO devices
controlled access to files
system access
error detection and response
internal and external hardware errors
memory error, device failure
software errors
arithmetic overflow, accesss forbidden memory locations
外中断: interruption 与当前运行程序无关的事件
内中断: exception / trap 非法操作码，地址越界，算术溢出，缺页，专门陷入指令&amp;hellip;</description>
    </item>
    
    <item>
      <title>也许是什么的开始...</title>
      <link>https://imfaye.me/post/beginning/</link>
      <pubDate>Sat, 07 Sep 2019 00:23:06 +0000</pubDate>
      
      <guid>https://imfaye.me/post/beginning/</guid>
      <description>最近很迷茫呢&amp;hellip;
感觉自己不学无术&amp;hellip;
夜里12点了，在宿舍床上的电脑桌上敲我的第一篇博客。
如题，希望是什么的开始。
TBC</description>
    </item>
    
  </channel>
</rss>
