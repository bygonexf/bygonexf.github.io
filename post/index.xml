<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 个个里</title>
    <link>https://imfaye.me/post/</link>
    <description>Recent content in Posts on 个个里</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Faye</copyright>
    <lastBuildDate>Sat, 25 Feb 2023 23:25:36 +0800</lastBuildDate><atom:link href="https://imfaye.me/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2018年9月，我想记下的旧家</title>
      <link>https://imfaye.me/post/nolstalgia2018/</link>
      <pubDate>Sat, 25 Feb 2023 23:25:36 +0800</pubDate>
      
      <guid>https://imfaye.me/post/nolstalgia2018/</guid>
      <description>备忘录里2018年9月3日记下的段落。
被告知寒假回来后可能要搬到新家、甚是惶恐、遂用相机和纸笔大刀阔斧地记下周遭全貌和牵扯进的重要回忆。
以下陈列一些过程中还算特别的细枝末节。
相较而言奇怪地多的物件，一是电脑，二是风铃。（大学以前，好像送人生日礼物，不是书和文具，就是风铃）。
床头柜至今仍贴着“明石浦朝雾蒙蒙，岛隐思行船”的便签，貌似是小学在图书馆借了一本奇怪的书说睡前默念三遍第二天可以早起的咒语。
从前在家的时候，每年圣诞节都会买装饰物挂在卧室的灯上，春节也会挂，然而涉及到生肖一年到头便会换，圣诞买的却一直留下来了，以至于看自己卧室的灯看出圣诞树的感觉（彩条雪球星星雪花风铃&amp;hellip;全有）。
书房的印象是墙上的中国和世界地图（伦敦处画了个红圈），和我打印的贝克街照片（那时我的梦想还是当个侦探，现在&amp;hellip;其实想想本质对杂学家的兴趣也没变）。
屯了一柜子的东西，除了正经书（这大概是好几柜子&amp;hellip;），都有被我妈无情丢弃的趋势，高中去南京读书回来发现自己一柜子精挑细选从小学留下来的少年文艺儿童文学全被当废纸卖了非常心痛，大学回来发现又一柜子的推理杂志和书也无踪无影了。多少有些可惜。
很喜欢火车经过的声音，睡不着时那种宫泽贤治的银河铁道之夜似的美感非常治愈。
周遭极适合探险，小学和邻居干过的熊孩子事包括但不仅限：烧草坪和莫名其妙从楼上砸下来的一袋豆腐、利用凸透镜聚光生火灼树叶做出艺术品、暴雪那年越过铁门跑到铁路上尽享无人踩踏的大片雪地、卧（废弃的）轨。
高中时模考写过一次巷子，范文印出来被隔壁班镇江老乡看见说想去我家参观。
什么扑簌扑簌的泡桐花、神秘的塔楼、满面高墙的爬山虎、一路毛茸茸的狗尾巴草和蒲公英、远山和青松、街巷文化里的烟火气、都是真的。
现实是那篇文章描述之上的美好程度。
谨以彼时作文、未公开的诗作、拍下并用力记住的照片，不成体统地感谢给予我完美童年的这个家。</description>
    </item>
    
    <item>
      <title>我所喜欢的河濑直美</title>
      <link>https://imfaye.me/post/kawase-naomi/</link>
      <pubDate>Sun, 15 Jan 2023 15:04:21 +0800</pubDate>
      
      <guid>https://imfaye.me/post/kawase-naomi/</guid>
      <description>最近偏爱河濑直美 很久之前就想看萌之朱雀，那段时间很喜欢超8mm摄像机的影片，目测剧情觉得相当工整并没第一时间看。前段时间偶然扫过沙罗双树的剧情简介，古都，双生子，神隐，祭典，这些词的意象以及剧照都相当吸引我。看完之后就开始沉迷河濑直美。
河濑直美确实是“一生只拍一部电影”的典型，始终徘徊在身世问题左右。想起她在东大入学仪式的致辞，也说了一直一直只盯着一扇窗，这一扇窗和世界的联结又也能让她和世界上众多的人相遇。身世，原生家庭，童年，似乎很多人长久执着于这些母题，有的时候我在想，是不是就算长大以后，我们作为人类的理解力也就只能帮助我们消化自我到青春期以前的这个节点。
我无限偏爱她抒情化的空镜头，泛出的柔光、环境音、易碎的颤动感。她镜头下的静物，和静止的相片相比，动人的正是时间穿行而过的窸窣感，柔光下的树木枝叶，风摇动的粼粼的光与阴影，触碰窗沿结着的雨珠，水的滴落，碗中浸泡的青豆浮动的光泽，晾晒的衣物被吹起的摆动，空转的圆盘形衣架。有某种薄如蝉翼的果冻一般的轻颤。
被凝视着的安静的时间流淌，影像中的时间流速和现实有了同步的校正。就好像沙罗双树里俊骑单车载着夕现实里很短影像中又显得很长的那一段路。
看了早期的短片，拥抱、在世界的沉默中、蜗牛、见到天堂，觉得自己可以一直一直看下去河濑直美的短片，一直一直平静下去，一直一直落入回忆的质感。电影里最喜欢的果然还是萌之朱雀和沙罗双树。也看了澄沙之味和光，故事却远远没有散景好。
沙罗双树 喜欢这一段长长的骑行路。
沙罗节，暴雨。日光和暴雨下的舞、喊词、两旁人群的加入、压抑许久释放出的笑。
蜗牛 代表理性旁观的摄影机镜头，代表个人情感的伸手触碰。
印象深刻的是，摄像机一直正面面向祖母，靠近靠近又靠近，祖母笑了，说干嘛一直拍我，怎么不拍拍你自己。祖母笑着说，不要拍啦。祖母笑着说，我又不是很快就要死掉。
拥抱 我很喜欢日光过曝又暗下去的反复，像长时间安静站立在原地阳光被一片一片云遮挡又穿透而出，像记忆里背景光的质感。
在世界的沉默中 </description>
    </item>
    
    <item>
      <title>布尔迪厄-《继承人：大学生与文化》 笔记</title>
      <link>https://imfaye.me/post/heriters/</link>
      <pubDate>Fri, 23 Dec 2022 15:04:21 +0800</pubDate>
      
      <guid>https://imfaye.me/post/heriters/</guid>
      <description>我的废话 第一次读布尔迪厄。感觉自己高中阶段和父亲的争执、本科时期感受到的大学本身的矛盾性、关于小镇做题家的迷思，全都得到了解答。
CH1 中选者的选择 对社会地位最低的人来说，接受高等教育的主观愿望比客观机会还要小。
出身越高，选择分科时更遵循家庭建议。
在对学习的态度方面，可以发现同样的差异。不管他们更赞同天才论，还是更相信自己的天才（二者并行不悖），出身于资产阶级的大学生在与他人一样承认存在脑力劳动技术的同时，又对此表示了更大的厌恶。这些技术，如拥有一套卡片或一个时间表，被公认为不能与智力冒险的浪漫形象并存。甚至连学习爱好和过程方面的细微末节，也表现了出身于上层阶级的大学生对智育的无所谓态度。当他们对自己的爱好和能力更为肯定，用极为多样的文化兴趣表现出真正的或所谓的兴趣广泛和成果各异的业余爱好时，其他人则表现出对大学的更多依附。当问及社会学专业的大学生，吏喜欢研究自己的杜会、第三世界还是人种学时，人们发现，社会出身越高，选择“异国”题目和地点的人越多。同样，如果说出身高的大学生更喜欢时髦思想的话（比如认为“神话学”研究更好地体现了社会学的目标），是不是一直受保护的经历使他们的爱好更服从于娱乐的原则而不是实际的原则？是不是在智育方面追求异国情调和表面的好心，只是一种象征性的，或者说无足轻事的炫耀方式，他们借此在说明自己的资产阶级经历的时候把它摆脱掉？为了形成这样一种智力机制，是不是应当提供一一而且要在很长时间内 ― 自由和免费选择的经济与社会条件？
处于有利地位的大学生，不仅从其出身的环境中得到了习惯、训练、能力这些直接为他们学业服务的东西，而且也从那里继承了知识、技术和爱好。一种“有益的爱好”对学习产生的间接效益，并不亚于前面那些因素。
文化行为受到的社会因素的制约，大于个人的兴趣和爱好。
可公共获得的领域，我们能收获相同的知识，然而态度和价值观依然会不同。
纯学校文化，不只是不完全的文化或文化的一个组成部分，而且是一种低层次的文化。
个人完成文化行为的方式赋予这些纯文化的性质：具有嘲弄味道的潇洒，故作风雅的简洁明了，使人态度自如或装成自如的合乎章法的自信，这些几乎总是发生在出身于上层阶级的大学生身上。在这些阶级里，上述行为方式标志着一个人属于精英之列。
文化遗产以更隐蔽、更间接的方式传递，甚至不需要一步步的努力和明显的行动。可能正是最有“文化教养”的阶层，最不需要宣传对文化的崇拜或有意识地进行文化实践的启蒙。在小资产阶级里，情况正好相反。大部分情况下，家长除文化方面的良好愿望外不能传递别的什么东西。有文化教养的阶级却把冗长的教诲作了精心安排，以通过暗中说服的方式使后代接受文化。
并且，反而学校会贬低自己传播的平民色彩的文化，理睬并助长了文化面前的最初不平等。
可是，每个人都得参加这一游戏，因为它以具有普遍性价值的面目出现在人们面前。如果说，出身于处在不利地位的阶级的儿童，经常发现上学就是学习那些人造的东西和教师的辞藻，那不正是因为对这些儿童来讲，学者式思考要先于直接经验吗？他们必须详细地学习巴台农神庙的平面图，却从不离开自己居住的省份；他们必须在整个学习期间同样被迫地，而不是真心地，谈论那些他们也说不上来的东西，谈论过去人们所酷爱的见解肯定法，谈论爱好方面那些无限大和无限小的差异。反复讲传统教育排除了所教全部内容的真实性，就是回避这样一个事实：不同阶层大学生不真实的感觉十分不同。
因此，从掌握文化的难易程度和愿望这两重意义上讲，工农出身的大学生处于最不利的地位：直到近一个时期，他们甚至还不能在家庭环境中找到吸引他们努力求学的因素。正是这样的因素，使中产阶级通过对占有的渴望弥补了原来不占有这一不足。为了使一个儿童进入国立中学并在以后一帆风顺，必须有持续不断的成功（和教师的频频告诫）。
按照极不平等的严格程度选择出来的人面前的相对平等，可以掩盖作为它基础的不平等。
出身于中产阶级和文化教养式存在着细微的差别，他们的校内学习能不能取得同样大的成功？不能排除有的教师把”优秀的“或”天才的“学生与”认真的“学生对立起来，在很多情况下不考虑其他因素，只从学生出生时就注定了的与文化关系的角度来进行判断。中产阶级出身的大学生素来努力学习，并且在工作中发挥他们所处环境推崇的职业美德（如崇拜严格而艰难地完成了的工作）。很多教师在评价这些学生时，也有意识地使用对文化精英使用的标准，当这些学生进人”权威“行列从而属于”精英“时尤其如此。文化和脑力劳动的贵族形象与人们对文化的共同认识是如此地接近，致使它甚至影响到对精英理论最深信不疑的人，阻止他们在表面的平等之外再要求更多的东西。
通过改变标记实现的价值观的颠倒，把认真变成了认真精神，把对劳动的崇尚变成了穷苦劳动者的斤斤计较和艰苦努力，并想以此来弥补天资的不足。从以”精英“的价值体系判断小资产阶级的价值体系的时候起，这一变化就开始了。就是说，按有教养、出身高的人的浅薄涉猎来衡量小资产阶级的价值体系。而这些人毫不费力地就掌握了知识，他们的现状和前途有保证，可以悠闲地追求风雅，敢于卖弄技巧。可是，精英文化与学校文化是如此地接近，小资产阶级出身的儿童（农民或工人的子弟更甚）只有十分刻苦，才能掌握教给有文化教养的阶级子弟的那些东西，如风格、兴趣、才智等。这些技能和礼仪是一个阶级所固有的，因为它们就是这个阶级的文化。对一些人来说，学到精英文化是用很大代价换来的成功；对另一些人来讲，这只是一种继承，它同时包含着便当和便当的诱惑。
如果推而广之，甚至可以说，这些社会决定因素的效果越不为人知，它们的决定作用就越无情。
所以，除去把教育面前的所有不平等归咎于经济不平等或政治意图，从而向这一制度开战之外，没有为教育制度服务的更好方式。事实上，教育制度可以通过其自身逻辑的作用使特权永久化。换言之，就是它可以为特权服务，而不需特权人物主动利用。此后，不管是对高等教育整体还是对它的一个方面而言，企图使教育制度的一个方面得以独立的要求，客观上服务于这一制度及其所效力的全部对象。因为，只需让这些因素从学前教育到高等教育发挥作用，就可以保证社会特权永久化。当奖学金或助学金制度表面上使出身于各个社会阶级的人在教育面前处于平等地位的时候，淘汰中下阶级儿童的机制就会发挥同样的作用（只是较为隐蔽）。这时候，人们可以比任何时候都更有理由，把不同社会阶层在不同层次的教育中所占比例的不平等归结于天资不同或愿望不同。
总之，不平等的社会因素的作用巨大，它可以使教育制度在经济条件平等的情况下，把社会特权转化为天资或个人学习成绩，从而不中断地维护不平等。表面的机会均等实现得越好，学校就越可以使所有的合法外衣服务于特权的合法化。
CH2 严肃游戏与游戏严肃 无疑，哪里的大学生活发达，哪里就留下它的居住场所、活动空间和必经的路线。大学生居住和课余活动的场所尽管分散在城市各个地方，但仍有自己的特色。人们平常的称呼证明了这一点，如“大学生区”、“大学生”咖啡馆、“大学生”住房。大部分大学生只有上一样的课这一个共同点。除此之外，人们无法承认，共同生活和居住这个简单的事实，具有使它聚集的个体结合成一个协调的群体的能力：为一个群体提供一体化框架的不是空间，而是在时间中对空间的有规律和有节奏的使用。
可是，在法国大学的传统中，找不到任何对合作理想的支持。从小学到研究生阶段，以制度为基础的集体工作仅仅是极少数特例。在自己的任务中，教师们往往把组织功能排到最后，对组织大学生集体工作一事尤为如此。更有甚者，从童年时候起，学校反复向学生灌输的完全是一种相反的理想，那就是个人主义的竞争。所以，大学生们可以提出与大学本身格格不入的集体工作的愿望，但是在大学受的教育又没有为他们作任何准备，不能发明使自己与长期以来内化的价值观背道而驰的技术。在这种情况下，大学里的工作小组经常失败的原因，首先是由于大学生——这些由只发展被动倾向的系统制造出来的产品，不能靠决心产生奇迹，凭空创造出一体化的新形式。
此种设计并不事先统一确定大学生象征性行为的内容，有时是专一地和有条理地把自己铸成大学生的意愿，不以一致承认理想大学生的形象为前提。因为，人们想实现的形象可以压缩为实现一种形象的迫切需要。想成为什么样的人和想自我选择，首先是拒绝成为不是自己选择的那种样子。在被拒绝或改变了的必然性当中，处在第一位的是社会出身。在避而不谈家长的职业方面，大学生们往往是一致的，而不管是什么职业。羞愧地沉默，说话半真半假，宣布与家庭断绝关系，都是与一种观点保持距离的好办法。这是学生们无法接受的观点：这种如此缺乏选择的决定，可以决定努力自我选择的人的一切。自我塑造和自我选择的愿望不一定造成某种确定的行为，它只象征性地利用行为，证明自己已经选择了此种行为。所以，无论是大学生对大学生还是对自己个人的评论，无论结果是肯定的还是否定的，总是要回到他是什么这个造成他存在的问题上来。
上面所说的肯定是一种极端现象。但是，是否可以说，具有这些传播手段的组织不可避免地传播一些东西，哪怕是它想传播并且认为正在传播的以外的东西？事实上，不管表面如何，大学一直是在说服那些已经被说服的人：既然它最终的使命是使人接受文化的价值，它就并非真正需要进行强制和惩罚，因为它的顾客都程度不同地向往进入知识分子阶层。可是，进人知识界只是有限的一部分大学生的合情合理的计划。那么，让所有的大学生，包括些以后不会进入知识界的大学生，都用几年的时间来经历这个假设的和游戏式的成为知识分子的过程，会有什么样的作用呢？
学习远不是一种简单的手段，它本身具有自己的目的。孤立地看待当前的学业，人们就会以对出发点和目的的的双重否定为代价，给自己一种全面体验知识分子志向的错觉。从此，学会在社会性决定因素面前做手脚和耍两面派，就成为一种很好的职业准备。因为这样可以掌握一些技术，知识分子通过这些技术可以获得真实的或虚构的对自由智力的体验。
学校环境有不止一种特点使人想到赌博环境：规则的使用只是为了使人参加进来，时间和空间有限而且来自诸决定因素起作用的真实世界。这是因为，通过使人相信自己是赌注，学校比其他各种赌博都更强烈地希望或要求参加者对这一游戏更为依恋。
大学最好的模式是合谋且虚构的对立，是自由辩论和自由命题论文。学校在压力之下，通过此类最为正式的练习，教授如何使用智力方面的自由。认为大学与大学文化有问题，不也是遵循了这一模式吗？因此，怎么能不看到，对学校制度的反抗和对异端的狂热追求，正在通过迂回的途径实现着大学所追求的最终目的？就连那些最循规蹈矩的教师，尽管他们的本意不是这样，也会激发对一种被认为更富有生气、更真实的”反文化“的认同。
表面最放荡不羁的行为，往往只是在传统模式的传统应用范围以外对这些模式的屈从：逃学的好学生是文化游击队员。**如果美国西部片不是作为西文化出现，对西部片的狂热会和现在一样吗？**电影俱乐部负责人听到的议论和发言，是文学和哲学教授一直尽力启发而又往往得不到的。于是对外部强加的规则的反抗，是规则所强加的价值观得以内化的途径之一。这与弗洛伊德的想象有相似之处：被摄取的父亲是从他被杀的时候起才处于支配地位的。
因此，巴黎大学生比其他所有的人都更倾向于把青年和社会的象征性隔绝与才智的形成混滑在一起 。在这种情况下，尽管女大学生的很多选择受制于最传统的模式，她们当中不少人还是通过跨越性别标准在实现着自已所勾划的解放型女知识分子形象。此种解放的最高象征性结果，表现为它所批准的明确倒：先是推崇童贞·后来是另一种神话一一应当不惜一切地丢掉童贞。 而在一定程度上，某些政治归属的吸引力，往往就在于可以使人以最廉价又最严重的形式象征性地消受与家庭环境的隔绝。与社会出身、职业前途及为之作准备的学业等所有约束保持距离，是典型的知识分子游戏，它呼呼并支持为拖饰而拖饰的游戏。社会出身造成的差异越是被回避，人们在观点和爱好中强烈地表现出来的差异就越是明显和突出。不同宗派以如此快的速度，以如此复杂的机制对抗、分化和组合的社会不是很多；论战游戏能以如此巨大的力量从中引起如此激情的群体也很少。于是，一个团体的少数人可以反对这个团体的多数人，并且并不因此而附和他们反对的人在里面处于少数的另一个更大团体中多数人的立场。
事实上，寻找差异需要一个前提。那就是，在差异游戏的限制和在其中进行游戏的必要性两者之间，达成一致。可是，不走出一致划定的范围，就很难发现真正的差异。这样，不同意见总是可能带有虚构性和表面性，人们所辩论的可能永远不是实质性问题。因为要想辩论，就要对实质问题取得一致。
于是，他们的境遇所形成的表象，表现为他们境遇的反面。思想社会学通过将赞成与反对倒置，揭示了已经宣布的差异掩盖的一致和已经宣布的一致掩盖的差异。
CH3 学徒还是小巫 如果前途通过过多的中介与现实相联，那它总容易被认为是虚幻的。孤立地看这种本质上讲是暂时的和过渡的状态，就使大学生在忘记前途的同时忘记了自己。为此目的，大学的传统向他们推荐了两大模式，一个是“考试能手”，一个是“浅薄涉猎”。二者表面上矛盾，却都得到了赞同。前一种人被学习的成功所强烈吸引，除考试外忘掉了一切，出发点就是人们认为考试可以保证的资格。这种“走极端”的大学生的视野受到只注意学习报应的局限，他们与只知道智力探险的无限遥远前景的“浅薄涉猎”者表面上正好相反。认为学艺本身就是自的的幻想，产生了去作知识分子——永恒的学徒的吸引力。但这只是神话般地进行着，因为必须要否认学艺真正为之服务的的，即进入一种职业——知识分子。在上面两种情况下，不论是使现时永恒化还是使它孤立化，所作的努力同样都是使客观地呼唤自己消失的现时固定不变。
被迫面对一个比较现实主义的职业计划，下层阶级出身的大学生永远不能完全堕入浅薄涉猎之中，或者被学习暂时的魅力所吸引。对他们来说，学习首先是一个机会，一个应当抓住的在社会等级中得以迁升的机会。必要性就是法律。他们更了解也更接受自己正在为之准备的职业，更清楚也更承认自己正在为一种职业做准备。大学生与他们的前途，即与他们的学业的关系，直接与本阶级的人接受高等教育的客观机会有关。上层阶级的大学生可以满足于空泛的计划，因为他们从未必须真正选择他们所作的事，这在他们的阶级甚至家庭中司空见惯。可是，下层阶级出身的大学生不能不对自己正在做的事提出疑问，因为他们忘记自己原本可以不做这件事的机会要少得多。
因此，如果说在大学生界经常见到的职业“技术”几乎总是具有魔法的性质，这绝非偶然。无疑，现行制度的逻辑是鼓励学生的惰性和依附性，使他们处在一个不能完全受完全合理的方式所支配的境地：比如，通过贬低成功秘方的作用，通过有时去掩盖正在发挥吸引力（有时是其全部吸引力）的物质和智力技术，通过使他们的判断标准含混不清，具有天赐能力的教师只能加深大学生的无能感、武断敢和注定失败感。在大学生这方面，因为他们更喜欢这样，因为相信天赐的能力比相信通过艰苦劳动去掌握技术所付出的代价要低，所以他们就在缺乏天资的情况下，认为只有魔法才可以对学业的成功产生作用。
CH4 结论 这样，学校的具有合法化作用的权威可以加重社会方面的不平等。因为，处于最不利地位的阶级对自己的命运过于觉悟，对于实现命运的途径又过于不觉悟，从而促进了自己命运的实现。</description>
    </item>
    
    <item>
      <title>耶，VAE</title>
      <link>https://imfaye.me/post/vae/</link>
      <pubDate>Sun, 10 Jul 2022 23:43:59 +0000</pubDate>
      
      <guid>https://imfaye.me/post/vae/</guid>
      <description>引子 生成模型 能从可学习的概率分布中采样得到样本的模型。
在一些生成模型中，样本通过将随机的隐层变量送入网络生成得到。
自编码器 AE 自编码器通过学习从输入到隐层和从隐层到输出的映射来重建信号/图像。
目标：$X&amp;rsquo; = D_\theta(E_\phi(X)) \approx X$
$\mathop{min}\limits_{\theta, \phi} \sum\limits_{i=1}^n||D_\theta(E_\phi(X_i))-X_i||^2$，其中 ${{X_i}}_{i=1\cdots n}$ 为数据集。
自编码器并不是一种生成模型，因为它并没有定义一个概率分布，无法采样。
自编码器 → 生成模型？
我们会有一个很自然的做生成模型的想法，那就是训练一个从低维隐层变量生成观测样本的生成模型，最大化观测数据似然。
假设这个生成模型为 $G_{\theta}:\mathbb{R}^k \rightarrow \mathbb{R}^d$，其中 $k &amp;lt; d$，将隐层变量 $Z$ 映射为样本 $X$，那么其实在样本空间里几乎大部分区域 $p(X)=0$。
如果我们从样本空间看，在这个高维空间只会有非常小的一个低维空间子集 $p(X)$ 是有值的，并且我们在训练的时候其实是不知道这个子集的分布的，而其余大部分区域 $p(X)=0$，也就意味着我们很难直接优化似然。
但是有一种方法可以让我们在每一处都得到非零值，那就是在已有先验 $p(Z)$ 的条件下，定义一个有噪声的观测模型 $p_\theta(X|Z)=\mathcal{N}(X;G_\theta(Z), \eta I)$ (其中 $\eta$ 是可调整的参数，$I$ 是单位矩阵)。
所以 $p(X) = \int p(Z)p(X|Z)\mathrm{d}Z$，这个值也很难去计算，所以我们不是去优化 $p(X)$ 而是去优化 $p(X)$ 的下限（变分推断里的证据下限 ELBO，后面会证明）。
那么这其实就是 VAE 的雏形了。
变分自编码器 VAE 上面的图是 VAE 的整体思路，生成的部分也是也就是 decoder 的部分，我们会假设 $Z$ 服从一个简单的先验分布 $p(Z)$，这个分布可以是一个标准正态分布。通过 decoder 会得到高维图像空间的一个概率分布。</description>
    </item>
    
    <item>
      <title>端到端图像/视频压缩里的熵模型</title>
      <link>https://imfaye.me/post/e2e-entropy-model/</link>
      <pubDate>Wed, 20 Apr 2022 17:04:37 +0800</pubDate>
      
      <guid>https://imfaye.me/post/e2e-entropy-model/</guid>
      <description>概率分布与熵编码 在端到端图像/视频压缩模型中，我们需要去尽可能精准地模拟待编码元素值的概率分布。一方面是为了更精确地进行码率估计，另一方面也是因为更精准的概率分布建模能使得熵编码环节更好地消除统计冗余节省码字。
建模出概率分布后，在实际熵编码中，就可以通过概率分布生成熵编码器所需要的概率表。
多说一句，在传统编解码里，通常熵编码会采用自适应模型，即随着编码字符的输入，不断更新概率分布（自适应模型相比静态模型效率更高，符合局部性原理，适应符号概率忽大忽小的波动，如果能合理地利用上下文信息压缩效率可以远超静态模型）。然而在端到端压缩模型里，通常直接通过网络生成独立的概率分布的参数，不会随着编码过程更新概率表。
量化不可导 这个没什么好说的，量化四舍五入的取整操作显然是不可导的，所以在训练的时候可以通过加均匀噪声来替换四舍五入的操作。
在训练阶段，我们会通过给待编码元素值加上-0.5到0.5的均匀噪声来替代量化操作。而实际推理的时候，就正常进行量化。
均匀噪声涉及到的概率关系 首先明确一下这几条线分布代表什么。
$p_{y_i}$：编码空间元素值的概率密度函数
$p_{\tilde{y_i}}$：$y_i$ 加上均匀噪声后的概率密度函数
$p_{\hat{y_i}}$：$y_i$量化后的概率质量函数（量化后就成了离散型变量了）
均匀噪声其实就是均匀分布 $U(-0.5, 0.5)$，$y_i$ 加上均匀噪声得到 $\tilde{y_i}$，两个独立的连续随机变量的和的概率分布公式是 $f_{X+Y}(z) = \int_{-\infty}^{\infty} f_X(x) f_Y(z-x) ,\mathrm{d}x$，直观来说也很好理解，对于任意 $\tilde{y_i}$ 值为 $c$，可能加均匀噪声得到 $c$ 的 $y_i$ 取值范围其实就是 $c-0.5$ 到 $c+0.5$，$p_{\tilde{y_i}}$ 在 $c$ 点的值其实就可以通过 $p_{y_i}$ 在 $c-0.5$ 到 $c+0.5$ 的积分得出。
对于每个整数点，也自然符合上述描述。
而这样一来，加均匀噪声得到的 $p_{\tilde{y_i}}$ 最妙的性质就在于，在每个整数点 $p_{\tilde{y_i}}$ 的值和实际量化得到的离散变量 $p_{\hat{y_i}}$ 在这一点的概率质量相等。
所以说，加均匀噪声这一操作，本质上类似于在给 $p_{\hat{y_i}}$ 的概率质量函数作插值，类似于一个连续松弛 (continuous relaxation) 的操作。
此外，我们在端到端模型里通常去建模的也就是这个 $p_{y_i}$，而这里其实是假设 $p_{y_i}$ 近似一个拉普拉斯分布，实际代码实现中，有一部分模型采用拉普拉斯分布去建模，也有一部分模型，比如 CompressAI，是采用高斯分布去建模的。
CompressAI 代码中的熵模型 以其中的 GaussianConditional 熵模型为例，稍微讲一下实际实现的时候一些常见操作。
def forward( self, inputs: Tensor, scales: Tensor, means: Optional[Tensor] = None, training: Optional[bool] = None, ) -&amp;gt; Tuple[Tensor, Tensor]: if training is None: training = self.</description>
    </item>
    
    <item>
      <title>可变形卷积与光流</title>
      <link>https://imfaye.me/post/dcn-and-optical-flow/</link>
      <pubDate>Sun, 20 Feb 2022 17:04:37 +0800</pubDate>
      
      <guid>https://imfaye.me/post/dcn-and-optical-flow/</guid>
      <description>可变形卷积代码篇 一个调用 from mmcv.ops import ModulatedDeformConv2d 的例子：
def forward(self, input): x = self.offset_mask_conv(input) o1, o2, mask = torch.chunk(x, 3, dim=1) offset = torch.cat((o1, o2), dim=1) mask = torch.sigmoid(mask) output = self.dcnv2(input, offset, mask) return output 总而言之 offset 的 size 就是 2*kernel[0]*kernel[1] ，想一想，原来我们求偏移的时候，会把 B*H*W*C 的图像送入普通卷积得到 B*H*W*2C 得到偏移，也就是每个通道每个位置点都有 x 和 y 两个方向的偏移量。
对 DCN 来说，每个通道都做一样的处理，也就是只需要对每个位置点存卷积核每个点的 x 和 y 的偏移，所以就是 B*H*W*(2*kernel_size) 。
关于 mask:：置信 mask，并非必需，不作展开了
所以 offset 和 mask 一起就是 B*H*W*(3*kernel_size)
关于 deform_groups：本来是所有通道公用，也可以改成划成几组，组数就是 deform_groups，那这样就是 B*H*W*(group_num*3*kernel_size)</description>
    </item>
    
    <item>
      <title>一些传统的熵编码方法</title>
      <link>https://imfaye.me/post/entropy-coding/</link>
      <pubDate>Sun, 05 Dec 2021 13:09:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/entropy-coding/</guid>
      <description>传统熵模型 算术编码 (Arithmetic Coding) 流程 （以静态模型举例）
假设有一段数据需要编码，统计里面所有的字符和出现的次数。编码从初始区间 (0, 1] 开始。 在当前区间内根据各字符概率划分子区间。 读入字符，找到该字符落入的子区间，将区间更新为该子区间，并重复 2, 3 步骤 最后得到的区间 [low, high) 中任意一个小数以二进制形式输出即得到编码的数据 例子如下：
实现细节 最后结果是一个小数，我们不能简单地用一个 double 类型去表示和计算这个小数，因为根据数据的复杂程度，这个小数可能任意长，小数点后可能会有成千上万位。
然而，小数点后的数据前几位很有可能是在过程中是可以不断提前确定的。例如如果当前区间为 [0.14432, 0.1456)，高位的 0.14 可以提前确定，14已经可以输出了。那么小数点可以向后移动两位，区间变成 [0.432, 0.56)，在此基础上进行后面的计算。这样编码区间永远保持在一个有限的精度要求上。
上述是基于十进制的，实际数字是用二进制表示的，当然原理是一样的，用十进制只是为了表述方便。
静态模型 → 自适应模型 静态模型在初始时对完整的数据统计完概率分布，之后不再更新概率分布；自适应模型随着字符的输入会不断更新概率分布。
静态模型的缺点在于：
在压缩前对信息内字符进行统计的过程会消耗大量时间。 对较长的信息，静态模型统计出的符号概率是该符号在整个信息中的出现概率，而自适应模型可以统计出某个符号在某一局部的出现概率或某个符号相对于某一上下文的出现概率，换句话说，自适应模型得到的概率分布将有利于对信息的压缩（可以说结合上下文的自适应模型的信息熵建立在更高的概率层次上，其总熵值更小），好的基于上下文的自适应模型得到的压缩结果将远远超过静态模型。 例如一段码流，某符号在前面出现概率较大而后面概率小，甚至忽大忽小，采用自适应模型就可以更好的适应这样的变动，压缩效率会比静态模型更高。主流视频编码标准如H.264/H.265都使用自适应模型。
算术编码 vs 哈夫曼编码 首先说结论，算术编码压缩效率更高，哈夫曼编码复杂度更低。
这两种编码，或者说熵编码的本质是，概率越小的字符，用更多的 bit 去表示，这反映到概率区间上就是，概率小的字符所对应的区间也小，因此这个区间的上下边际值的差值越小，为了唯一确定当前这个区间，则需要更多的数字去表示它。
哈夫曼编码由于不断地二叉，它的子区间总是 $\frac{1}{2}$ 的幂次方。而算术编码可以做到严格按照概率的大小等比例划分子区间。所以哈夫曼编码只是算术编码一种粗略的近似。
CABAC CABAC（Context-based Adaptive Binary Arithmetic Coding），CABAC 被视频标准H.264/H.265所采用。
CABAC可以分为二值化、上下文建模和二进制算术编码三个步骤。
其中上下文建模相当于把整段码流进行了再次的细分，把相同条件下的字符bin（比如块大小/亮度色度/语法元素/扫描方式/周围情况等）归属于某个context，形成一个比较独立的子队列而进行编码，其更新只与当前的状态和当前字符是否MPS有关（换句话说，只和历史该子队列编码字符和当前字符有关），而与别的子队列/字符是无关的。当然输出码字往往是根据规则而“混”在一起的。
CABAC虽然性能很好，但也存在以下几点不足：
复杂度过高，不易并行处理。存在块级依赖（左/上角的块没有码率估计/熵编码，后继块就无法得到更新后的状态，从而无法开始码率估计/熵编码）、Bin级依赖（同一个子队列的bin存在前后依赖性，后继的bin要等前面bin编完后才能得到更新后的上下文状态）以及编码的几个环节依赖，这些依赖性会影响编码器的并行实现。 计算精度问题。为简化计算，CABAC采用128个状态来近似，根据原来状态和当前符号性质查表得到下个状态。这个过程中会有一些精度的损失。另外，如果当一连串的MPS到来，状态到达62后就不会继续改变，只会“原地踏步”。换句话说，当概率到达0.01975时就不会随着符号继续变小，这样会影响压缩效率。 Context的设计问题。部分context利用频率很低，在测试中平均一帧都用不到几次，而有的context使用频率很高，需要进一步的优化。 区间编码 (Range Coding) 区间编码可以看为算术编码的一个变种，比算术编码压缩效率略小，但运算速度近乎是算术编码的两倍。
区间编码在整数（任意底）空间中进行进行计算，而算术编码的区间总是以小数的形式进行迭代。其他部分都几乎一样。
端到端熵模型 Todo&amp;hellip;</description>
    </item>
    
    <item>
      <title>图像质量评价指标(MSE, PSNR, MS-SSIM)</title>
      <link>https://imfaye.me/post/image-quality-evaluation-metrics/</link>
      <pubDate>Thu, 02 Dec 2021 23:35:47 +0000</pubDate>
      
      <guid>https://imfaye.me/post/image-quality-evaluation-metrics/</guid>
      <description>如何评价重建图像的质量：比较重建图像与原始图像的可视误差。
MSE Mean Squared Error, 均方误差
$MSE = \frac{1}{N}\sum\limits_{i=1}^{N}(x_i-y_i)^2$
两者越接近，MSE 越小。MSE 损失的范围为 0 到 ∞。
PSNR Peak Signal to Noise Ratio，峰值信噪比，即峰值信号的能量与噪声的平均能量之比，通常取 log 单位为分贝。
$PSNR = 10 log_{10}\frac{MaxValue^2}{MSE}$
从式子可以看出 PSNR 可以理解为 MSE 的另一种表达形式。与 MSE 相反的是，重建图像质量越好，PSNR 数值越大。
对于图像来说，像素点数值以量化方式保存，八比特位深的情况，取值范围为 [0, 255]，$MaxValue$ 就是 255。
SSIM MSE 与 PSNR 的问题是，在计算每个位置上的像素差异时，其结果仅与当前位置的两个像素值有关，与其它任何位置上的像素无关。这种计算差异的方式仅仅将图像看成了一个个孤立的像素点，而忽略了图像内容所包含的一些视觉特征，特别是图像的局部结构信息。而图像质量的好坏极大程度上是一个主观感受，其中结构信息对人主观感受的影响非常之大。
而 SSIM (Structural Similarity，结构相似性) 就试图解决这个问题
SSIM 由三部分组成：
亮度对比 平均灰度作为亮度测量： $\mu_x = \frac{1}{N}\sum\limits_{i=1}^{N}x_i$ 亮度对比函数： $l(x,y) = \frac{2\mu_x\mu_y + C_1}{\mu_x^2+\mu_y^2+C_1}$ 对比度对比 灰度标准差作为对比度测量： $\sigma_x={(\frac{1}{N-1}\sum\limits_{i=1}^N{(x_i-\mu_x)}^2)}^{\frac{1}{2}}$ 亮度对比函数： $c(x,y)=\frac{2\sigma_x\sigma_y+C_2}{\sigma_x^2+\sigma_y^2+C_2}$ 结构对比 结构测量： $\frac{x-\mu_x}{\sigma_x}$ 结构对比函数： $s(x,y) = \frac{\sigma_{xy}+C_3}{\sigma_x\sigma_y + C_3}$ SSIM 函数：</description>
    </item>
    
    <item>
      <title>AVS3 编码位流</title>
      <link>https://imfaye.me/post/avs3-bitstream/</link>
      <pubDate>Thu, 01 Apr 2021 17:28:29 +0000</pubDate>
      
      <guid>https://imfaye.me/post/avs3-bitstream/</guid>
      <description>概述 视频序列是位流的最高层语法结构。
帧由一个亮度样本矩阵和两个色度样本矩阵构成。场由构成帧的三个样本矩阵中相间的行构成。奇数行构成顶场，偶数行构成底场。
视频序列头由视频序列起码码开始，后面跟着一串编码图像数据。序列头可在位流中重复出现，称为重复序列头。使用重复序列头的主要目的是支持对视频序列的随机访问。
一副图像可以是一帧或一场，其编码数据由图像起始码开始，到序列起始码、序列结束码或下一个图像起始码结束。
片是图像中的矩形区域，包含若干最大编码单元在图像内的部分，片之间不应重叠。
图像划分为最大编码单元，最大编码单元之间不应重叠，最大编码单元左上角的样本不应超出图像边界，最大编码单元右下角的样本可超出图像边界。
最大编码单元划分为一个或多个编码单元，由编码树决定。编码单元划分为一个或多个变换块。
码流结构及语义描述 视频序列 序列头 sequence_header
视频序列起始码、档次标号、级别标号、知识位流标志、知识图像允许标志、知识位流重复序列头标志、逐行序列标志、场图像序列标志、水平尺寸、垂直尺寸、色度格式、样本精度、编码样本精度、宽高比、帧率代码、比特率低位、比特率高位、低延迟、时间层标识允许标志、位流缓冲区尺寸、最大解码图像缓冲区大小、参考图像队列 1 索引存在标志、参考图像队列相同标志、参考图像队列配置集数、默认活跃参考图像数、最大编码单元尺寸、最小编码单元尺寸、划分单元最大比例、编码树最大划分次数、最小四叉树尺寸、最大二叉树尺寸、最大扩展四叉树尺寸、加权量化允许标志、加权量化矩阵加载标志、二次变换允许标志、样值偏倚补偿允许标志、自适应修正滤波允许标志、仿射运动补偿允许标志、对称运动矢量差模式允许标志、脉冲编码调制模式允许标志、自适应运动矢量精度允许标志、候选历史运动信息数、帧内预测滤波允许标志、高级运动矢量表达模式允许标志、运动矢量精度扩展模式允许标志、色度两步预测模式允许标志、帧内衍生模式允许标志、衍生模式划分边长最大尺寸、基于位置的变换允许标志、图像重排序延迟、跨片环路滤波允许标志、片划分一致性标志、参考同位置片标志、统一片大小标志、片宽度、片高度
视频编辑码和视频序列结束码
视频编辑码 video_edit_code
紧跟其后的第一幅 I 图像后续的 B 图像可能因缺少参考图像而不能正确解码
视频序列结束码 video_sequence_end_code
标识视频序列的结束。如果 POI（显示顺序索引），如果 POI 的值大于 $(2^{32}-1)$，位流中应插入一个视频序列结束码。
参考图像队列配置集
参考知识图像标志、知识图像索引标志、被参考的知识图像索引、参考图像数、参考图像 DOI 差值绝对值、参考图像 DOI 差值符号
自定义加权量化矩阵
加权量化矩阵系数
图像 帧内预测图像头
帧内预测图像起始码、BBV 延时、时间编码标志、时间编码、解码顺序索引、知识图像索引、时间层标识、图像输出延迟、引用参考图像队列配置集标志、引用参考图像队列配置集索引、BBV 检测次数、逐行帧标志、图像编码结构标志、顶场在先、重复首场、顶场场图像标志、固定图像量化因子、去块滤波禁用标志、去块滤波参数标志、$\alpha$ 和 C 索引的偏移、$\beta$ 索引的偏移、色度量化参数禁用标志、色度量化参数增量 Cb、色度量化参数增量 Cr、图像加权量化允许标志、图像加权量化数据加载索引、加权量化参数索引、加权量化矩阵模型、加权量化参数增量 1、加权量化参数增量 2、图像自适应修正滤波允许标志
帧间预测图像头
帧间预测图像起始码、随机访问正确解码标志、图像编码方式、活跃参考图像数重载标志、活跃参考图像数、仿射预测子块尺寸标志
片
片起始码、固定片量化银子标志、片量化因子、片样值偏移补偿允许标志、高级熵编码字节对齐填充位、最大编码单元量化参数增量、样值偏移补偿合并方式索引、样值偏移补偿模式、样值偏移补偿区间模式偏移绝对值、样值偏移补偿区间模式偏移值符号值、样值偏移补偿区间模式起始偏移子区间位置、样值偏移补偿区间模式起始偏移子区间位置差、样值偏移补偿模式偏移值、样值偏移补偿边缘模式类型、最大编码单元自适应修正滤波允许标志、熵编码最大编码单元填充位、片结束码
编码树 四叉树划分标志、编码单元预测模式、二叉树扩展四叉树划分标志、二叉树扩展四叉树划分类型标志、二叉树扩展四叉树划分方向标志
编码单元 跳过模式标志、高级运动矢量表达模式标志、仿射模式标志、直接模式标志、帧内编码单元标志、基础运动矢量索引、运动矢量偏移量索引、运动矢量方向索引、仿射运动矢量索引、衍生模式划分标志、衍生模式划分方向、水平四叉衍生模式划分标志、垂直四叉衍生模式划分标志、水平非对称衍生模式标志、仿射自适应运动矢量精度索引、自适应运动矢量精度索引、编码单元子类型索引、预测参考模式、对称运动矢量差标志、运动矢量精度扩展模式标识、帧内亮度预测模式、帧内色度预测模式、帧内预测滤波标志、L0 预测单元参考索引、L0 运动矢量水平分量差绝对值、L0 运动矢量垂直分量差绝对值、L0 运动矢量水平分量差符号值、L0 运动矢量垂直分量差符号值、仿射帧间模式L0 运动矢量水平分量差绝对值、仿射帧间模式 L0 运动矢量垂直分量差绝对值、仿射帧间模式 L0 运动矢量水平分量差符号值、仿射帧间模式 L0 运动矢量垂直分量差符号值、L1&amp;hellip;、变换块系数标志、基于位置的变换块标志、Cb 变换块编码模板、Cr 变换块编码模板、亮度变换块编码模板</description>
    </item>
    
    <item>
      <title>H.265/HEVC 预测编码 笔记</title>
      <link>https://imfaye.me/post/prediction-coding/</link>
      <pubDate>Wed, 31 Mar 2021 17:04:49 +0000</pubDate>
      
      <guid>https://imfaye.me/post/prediction-coding/</guid>
      <description>视频预测编码技术 预测编码是指利用已编码的一个或几个样本值，根据某种模型或方法，对当前的样本值进行预测，并对样本真实值和预测值之间的差值进行编码。
帧内预测编码 随着离散余弦变换 (DCT) 在图像、视频编码中的广泛应用，帧内预测转为在频域进行，如相邻块 DC 系数的差分编码等。由 DCT 的性质可知，DC 系数仅能反映当前块像素值的平均大小，因此上述频域中基于 DC 系数的帧内预测无法反映出视频的纹理信息，这限制了频域帧内预测的发展。
H.264/AVC 标准中使用基于块的空域帧内预测方法，规定了若干种预测模式，每种模式都对应一种纹理方向（DC 模式除外），当前块预测像素由其预测方向上相邻块的边界重建像素生成。该方法使得编码器能根据视频内容特征自适应地选择预测模式。
H.264/AVC 使用拉格朗日率失真优化 (RDO) 进行模式选择。它为每一种模式计算其拉格朗日代价： $$ J = D + \lambda \cdot R $$ 其中，$D$ 表示当前预测模式下地失真，$R$ 表示编码当前预测模式下所有信息（如变换系数、模式细腻些、宏块划分方式等）所需的比特数。最优的预测模式不一定满足残差最小，而应指残差信号经过其他编码模块后最终的编码性能最优。
H.264/AVC 标准及后来的 FRExt 扩展层一共规定了 3 种大小的亮度帧内预测块：4 × 4、8 × 8 以及 16 × 16。其中 4 × 4 和 8 × 8 块包含 9 种预测模式，16 × 16 块包含 4 种预测模式。色度分量的帧内预测都是基于 8 × 8 大小的块进行的，也有 4 种预测模式。
帧间预测编码 帧间预测编码原理 目前主要的视频编码标准帧间预测部分都采样了基于块的运动补偿技术。其主要原理是为当前图像的每个像素块在之前已编码图像中寻找一个最佳匹配块，该过程被称为运动估计 (Motion Estimation, ME)。其中被参考的图像称为参考图像 (Reference Frame)，参考块到当前像素块的位移称为运动向量 (Motion Vector, MV)，当前像素块与参考块的差值称为预测残差 (Prediction Residual)。</description>
    </item>
    
    <item>
      <title>H.265/HEVC 编码结构 笔记</title>
      <link>https://imfaye.me/post/video-coding-structure/</link>
      <pubDate>Wed, 31 Mar 2021 11:34:13 +0000</pubDate>
      
      <guid>https://imfaye.me/post/video-coding-structure/</guid>
      <description>名词一览 GOP (Group of Pictures) - 图像组 IDR (Instantaneous Decoding Refresh) - 即时解码刷新 Slice - 片 SS (Slice Segment) - 片段 CTU (Coding Tree Unit) - 树形结构单元 CTB (Coding Tree Block) - 树形编码块 CU (Coding Unit) - 编码单元 SPS (Sequence Parameter Set) - 序列参数集 PPS (Picture Parameter Set) - 图像参数集 CVS (Coded Video Sequence) - 一个 GOP 编码后生成的压缩数据 VPS (Video Parameter Set) - 视频参数集 编码结构概述 编码结构 视频序列分隔为若干个图像组 (GOP)。
存在两种 GOP 类型：</description>
    </item>
    
    <item>
      <title>多媒体基础知识</title>
      <link>https://imfaye.me/post/multimedia-basics/</link>
      <pubDate>Mon, 29 Mar 2021 15:10:25 +0000</pubDate>
      
      <guid>https://imfaye.me/post/multimedia-basics/</guid>
      <description>图像数值表示 分辨率 分辨率的基础单位是像素。1280 * 720 P 的分辨率代表共有 1280 * 720 个像素点。
一台物理设备出厂时就已经定下了它所能拥有的最大像素点是多少。电脑显示屏调整分辨率是系统通过运算来给出模拟色彩块填充适配的。
下述像素排列方式内容为 expansion pack，可略过。
像素排列方式 标准 RGB 排列 LCD 屏幕上常采用标准 RGB 排列，会将一个像素分为 3 个子像素并排排列，通过红、绿、蓝滤色片将 LCD 背光模组的白光过滤后形成相应的 RGB 子像素排列。当需要显示不同颜色的时候，3 个子像素以不同的亮度发光，在视觉上会混合成所需要的颜色。
PenTile 排列 PenTile 排列多见于 OLED 屏幕上，因子像素呈现钻石排列而得名。PenTile 排列的每个像素由红、绿和蓝、绿子像素组合而成，绿色像素是完整的，而红蓝像素相比传统 RGB 排列各减少二分之一，子像素总数减少了约三分之一。
不像标准 RGB 排列每个像素更加独立，PenTile 排列在显示许多内容时需要借用相邻像素，显示精细内容时同分辨率下相较标准 RGB 排列的屏幕细腻度不足。
蓝色 OLED 的发光效率要比红色和绿色低，达到相同的发光强度必须使用更高的通过电流，因而蓝色像素衰减速度更快，也就会加速“烧屏”现象的产生。
YUV 表示方式 对于视频裸数据而言，更多使用 YUV 数据格式显示。
Y 表示明亮度 (Luminance / Luma)，即灰阶值 U、V 表示色度 (Chrominance / Chroma)，描述色调饱和度 亮度通过 RGB 输入信号来建立，方法是将 RGB 信号的特定部分叠加到一起。色度定义了颜色的色彩和饱和度，分别用 Cr 和 Cb 表示。Cr 表示 RGB 输入信号红色部分与 RGB 亮度值之间的差异，Cb 表示 RGB 输入信号蓝色部分与 RGB 信号亮度值之间的差异。</description>
    </item>
    
    <item>
      <title>Win10 下 Linux 子系统 (WSL) 配置小记</title>
      <link>https://imfaye.me/post/wsl/</link>
      <pubDate>Sun, 21 Mar 2021 20:29:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/wsl/</guid>
      <description>网络代理配置 刚开始用 apt-get 就被卡到。
WSL1 的时候，Linux 子系统和 Windows 主机是共享一个 localhost 的。WSL2 由于通过虚拟机实现，若要访问 Windows 主机的网络，需要使用主机的 IP 地址（IP 地址可以用 ipconfig 命令查看）。
WSL2 环境变量配置 如果是 V2rayX 的话，默认 socks5 端口是 10808，默认 http 端口是 10809。
如果是 Clash for Windows 的话，默认 socks5 端口是 7891，默认 http 端口是 7890。
以个人经验教训来说，http 和 socks5 两种代理方式可以都尝试一下。
export http_proxy = &amp;#34;socks5://&amp;lt;windows_ip&amp;gt;:&amp;lt;socks5_port&amp;gt;&amp;#34; export https_proxy = &amp;#34;socks5://&amp;lt;windows_ip&amp;gt;:&amp;lt;socks5_port&amp;gt;&amp;#34; git 也可以设置使用代理。
git config --global http.proxy &amp;#34;socks5://&amp;lt;windows_ip&amp;gt;:&amp;lt;socks5_port&amp;gt;&amp;#34; git config --global https.proxy &amp;#34;socks5://&amp;lt;windows_ip&amp;gt;:&amp;lt;socks5_port&amp;gt;&amp;#34; 当然，如果希望每次启动的时候代理配置都生效，可以写入 ~/.bashrc 文件中。
顺便一提查看 git 全局配置的命令是：</description>
    </item>
    
    <item>
      <title>一部分的日记(2019.9至2020.4)</title>
      <link>https://imfaye.me/post/dear-diary/</link>
      <pubDate>Sun, 19 Apr 2020 21:48:42 +0000</pubDate>
      
      <guid>https://imfaye.me/post/dear-diary/</guid>
      <description>果然，日记吧&amp;hellip;不是能全部坦诚相待的东西。这里只是一部分的真实的我。
2020 2020/4 4/18 晚上和爸爸妈妈一起去走南山绿道。刚下完雨，空气里完全是水汽。能闻到那种水汽的味道。天空暗下来，旁边是茂密的树林或竹林，有绿色的灯照出雾气，路上谁都没有。聊起了以前出去旅游的事情。去木桥那打手机的手电筒看一大片山谷里的杜鹃花。路上有小学经常闻的那种野花的幽香。后来回来半路又下雨了。淋了一场雨一起回家。爸爸说淋一场春雨不是很好吗。
回来之后，洗完澡一边喝牛奶一边和妈妈看快乐大本营。
我真的只想有一些这样的温馨和细小的满足就行了。像小时候一样。
4/17 想起了之前听随机波动。新闻的关注全都给了可以被数据可视化的内容。没有办法呈现出一个一目了然又蕴含爆炸性信息的东西，可能完全不会被分到注意力，也完全不会被新闻从事者所费力去挖掘。那么长的叙事，平淡的，无法给你颠覆性的视觉冲击的东西，就注定要被人忽略吗。
靥足。
4/14 上午把钢炼看完了。哭了。
后来心情还是不好。一直在看月曜。
4/13 感觉好久没上课了一样。
妈妈买了很多吃的回来，还买了香水百合放在餐厅。外面阳光超好。我都有点想哭。
晚上一直在看钢炼。
4/11 晚上菊梅姐姐他们来我们家，和妮妮聊了很久，妮妮真的成熟了好多。一起看电视，名侦，柯南什么的。晚饭的时候，我还炒了刀豆丝。
说一下最近查资料有意思的事情。
总是想起那个教授说的，我们检索记忆的方式，不是倒放，而是直接抽取过去某个点。
人脑存储记忆的方式。回想是一个重构的过程。随着每次检索，都会改变。大脑对概念的优先级高于细节。
4/3 早上竟然就在床上听完了机器学习。这个老师好憨。
看了一些语言学的视频。
下午看了看瑞幸那事。想起之前听的剩余价值了。资本真的在侵压我们所有的生活空间的小角落，从公到私。压榨剩余价值，侵入，一切追求效率利润最大化。我还是觉得，它应当只作为被提供的选择出现，而不是强制性地挤压所有弹性空间。小商小贩，我们的个性化的充满生活气息的小角落，不得不和巨型资本融合。我们真的需要那么强的便利性吗，我们只是一味地被市场投喂，靥足之后进化出妖怪一样的欲望。
听剩余价值，这期聊足球。
英国两大工业城市，曼彻斯特，利物浦。所以曼联和利物浦一直是宿敌。
有球能力和无球能力。梅西有球能力强，C罗无球能力强。而电视转播通常视线是围绕着球的，难看见无球能力。
4/2 N号房 色情 和纸片人 和真人(可是随着以后技术的发展，纸片人的同意与否是否需要被考虑) 限制级，因为小孩子分不清虚拟和现实 想象力不能被取缔
并不是主体与主体之间的关系，对女性开的色情玩笑，本质上更期望获得同性的认同，女性只是工具，男性共同体的认同感，排除自己同性恋倾向的嫌疑，因为被男性共同体所鄙视
对了，无线键盘到了。
每天应该更有干劲一些。
4/1 今天回了江心。好久没回去过了。汽渡，过江。
烧纸，然后去姨娘家吃饭，还看了小舅还在起的新房子。
到的快递竟然有一个是之前的托福成绩单。
2020/3 3/29 不记得了。
最近一直在听indigo la end的tulip，川谷果然很厉害，那种又温暖又无法挽回的失落感。
可能在写樱花诗赛的诗。
3/28 看钢炼。
晚上妈妈带了牛肉汤和葱油饼。吃完之后一起去走南山绿道。
看远处的字。走亭廊。竞走。
3/26 昨天夜里好大的雨，好大的雷。
今天终于装修的安静了一天。
看魔兽战线。人与神共存。无理的，残酷的，可以怪罪到神和未知的事情上，不必那么痛苦。神所理解的善。还有后面提亚马特，被人类史所不需要的神。
大概可以理解一些迷惑的展开。不过画面没得说啊，我果然是氛围感控。今天本来也下着雨，有点找到那种清冷的感觉。
看见别人发了朋友圈回忆附中。啊，怎么说，当时那么有反叛精神的人也有如此传统的温情时刻吗，少年时代真的是一去不复返吗，它是作为我们的一部分隐匿在记忆里与我们共存，还是被以后的展开取代只是能找到合理的解释与去往根源的通路呢。变得正确，就变得无聊了，但也是变得靠谱成熟了。是我自己在拒绝成为独挡一面的大人吗。
晚上看完了魔兽战线，梅林的花瓣，西杜丽，安娜，小恩的天之锁。喜欢闪闪，更理解三王会谈里闪闪说的孤高了，后悔，想去拯救，对宿命的否认，对人民挣扎姿态的怜悯也就是对自己的领导和对他们的侮辱。你的善良是一种割裂，是一种软弱和逃避，也因为他始终能看见未来吧，始终把现在和未来看成一个连续的整体，肯定现在就是在肯定未来，所以无需去后悔。不过对于亚瑟来说，她的确不是自己选择去成为王的，她对每一个个体都怀抱着同情吧。
3/25 晚上妈妈回来带了淮南牛肉汤，还吃了蛋挞。满足~
最近觉得自己有进步的地方是，终于没有那么容易羡慕别人了。本来，自己不塑造自己，靠这种与外界的牵连也很脆弱吧。
3/24 依旧，装修的声音让人简直神经衰弱。有在看魔兽战线。喜欢闪闪。
上午和红叶打电话，聊天。嗯，跳出那个框子，稳固一点弥补自己觉得应该弥补的，不用太担心会和高中一样，也不用太高地期望什么。
老婆饼，榴莲酥，青团，酸奶拌香蕉。
下午后来在研究吉尔伽美什和恩齐都。后来和污妖王聊了会儿天，我完全都不知道原来新加坡现在疫情愈发严重了。有点可怕。
后来还和春花聊天。</description>
    </item>
    
    <item>
      <title>PAT刷题记录 1038 Recover the Smallest Number</title>
      <link>https://imfaye.me/post/pat-1038/</link>
      <pubDate>Sun, 19 Apr 2020 18:13:57 +0000</pubDate>
      
      <guid>https://imfaye.me/post/pat-1038/</guid>
      <description>Recover the Smallest Number
#include &amp;lt;iostream&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;vector&amp;gt; using namespace std; vector&amp;lt;string&amp;gt; num; bool cmp1(string a, string b) { int la = a.length(), lb = b.length(); string temp; if (la == lb) return a &amp;lt;= b; else if (la &amp;lt; lb) //自己重新定义字符串比较的定义 { if (a.compare(b.substr(0, la)) == 0) { temp = b.substr(la) + a; if (temp &amp;lt;= b) return false; else return true; } else return a &amp;lt;= b; } else if (la &amp;gt; lb) { if (b.</description>
    </item>
    
    <item>
      <title>PAT刷题记录 1033 To Fill or Not to Fill</title>
      <link>https://imfaye.me/post/pat-1033/</link>
      <pubDate>Sun, 19 Apr 2020 18:03:34 +0000</pubDate>
      
      <guid>https://imfaye.me/post/pat-1033/</guid>
      <description>很有意思的一道贪心
#include &amp;lt;iostream&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;algorithm&amp;gt; using namespace std; double cmax, davg, dall; int n; struct Node { double price; double dis; }sta[505]; bool cmp1(Node a, Node b) { return a.dis &amp;lt; b.dis; } int main() { scanf(&amp;#34;%lf%lf%lf%d&amp;#34;, &amp;amp;cmax, &amp;amp;dall, &amp;amp;davg, &amp;amp;n); for (int i = 0; i &amp;lt; n; ++i) { scanf(&amp;#34;%lf%lf&amp;#34;, &amp;amp;sta[i].price, &amp;amp;sta[i].dis); } sort(sta, sta + n, cmp1); bool flag = false; double far = 0; int ns = 0; int i1 = 0; double min1 = 9999999; double cost = 0; double cnow = 0; double bestprice; while (sta[i1].</description>
    </item>
    
    <item>
      <title>转录，故乡，镇江</title>
      <link>https://imfaye.me/post/zhenjiang/</link>
      <pubDate>Sat, 18 Apr 2020 15:04:21 +0800</pubDate>
      
      <guid>https://imfaye.me/post/zhenjiang/</guid>
      <description>也许是初高中还在用QQ空间的时候，转载的文章，像一首小小的诗。
我迷恋一切记录的形式，想精进一切记录的手段，写作和摄影都是。童年，故乡，记忆里的千禧年代。想自己写下一些城市志，我有太多想永远记住的物事。
新华书店的对面是新华影剧院
里面的影厅很久很久
座位上暗红色的绒布下黄色的海绵总是露出头
快要建好的苏宁广场拐角那边原本有一家很好吃的铁板鱿鱼
还有果汁和糖衣很厚的冰糖葫芦
大喇叭一直喊到夜色阑珊
国际饭店的顶上的尖尖不管在哪里都可以看见
零散的记忆里妈妈说那是镇江的中心
伯先公园的猴子好像养了很多很多年
久到也许是猴子们都安享晚年去了所以再也没见过它们
老焦山都码头很安静
大门到码头的路上郁郁葱葱的绿色
夹了桂花的香气沙沙摇了很多年
少年宫对面江滨公园还有露天摆放的沙画摊子
三块钱一小张五块钱一大张
从美少女战士到没嘴巴的 hellokitty
104 还在那里有站台
火车站好像很远很远很远
门口有拎着大包小包的路人
过年的时候熙熙攘攘
妈妈总是担心我被巨大的蛇皮袋挡住去路
商业城的东西好像很贵很贵
记忆中一直是堵住的实小门口
喇叭声和铃铛声还有争执声
只有4路有双层的车子
坐在上面摇摇晃晃 却每次都很感觉新奇
只有长江路上能看到对面一条线一样的扬州
晚上有点点灯火闪烁
江滨医院还只有很小的一块地盘
一楼的走廊有很多花草在路边
清晨和傍晚路口总是有穿着白色围裙的爷爷奶奶卖自己做的包子烧饼
茶叶蛋蹲在不锈钢的锅里
壳都是敲碎了的
黑褐色的汤汁咕嘟咕嘟翻着泡泡
路上没有这么多汽车
很多爸爸还骑着有横杠的老式自行车
孩子小小的坐在车后或是横杠上
妈妈会很细心地缝厚厚的坐垫绑在车后
颠的时候就不会觉得屁股裂成几片了
老式诺基亚说话声音要很大对面才能听清
短信还有字数限制
好像还是我闭着眼睛就能走完的镇江
但是好像走着走着
就把我的镇江丢进回忆里
一个漩涡泛起一个小小的气泡
连痕迹都无影无踪
却是真真切切存在的
我的小城</description>
    </item>
    
    <item>
      <title>语言学概论 笔记</title>
      <link>https://imfaye.me/post/linguistics/</link>
      <pubDate>Sun, 05 Apr 2020 16:44:14 +0000</pubDate>
      
      <guid>https://imfaye.me/post/linguistics/</guid>
      <description>CH1 语言能力与语言系统 易境性 动物交流的特点：在场。在场与直接经验。人类不必在场传递经验，关键在语言。通过语言传递知识与经验，不必在场。
还原生成性 基于类推原则的还原生成能力。从单词到句子，是一种创造性行为。乔姆斯基：语言是有限规则和单位生成无限的句子。
还原生成能力：通过有限的句子还原出有限的规则和单位，并通过这些单位生成无限的句子。
人类语言学习的自然还原能力。只要存在一定数量的句子，不需要人为切分，就可以还原出有限的规则和单位，生产无限的句子。(我们不必看过全部的句子，自然通过对比就实现切分)(小孩是如何自然学习语法的。成人所总结的语法未必是正确的。所以我们希望学习方法论。)
动物语言能力。呼叫或姿态大多是整体，句子有限。
任意性 语言能力在特定文化中的运用形成语言系统。核心部分：
基于任意性的符号编码能力 基于类推性的还原生成能力 区分两种基本单位的能力(体现为符号的两层性) 编码能力：能在任意性原则上把所指和能指结合成符号的能力
任意性：词的语音形式A和意义B的关系是任意的
动物语言的形式与意义之间任意性成分很少。
我们的符号系统里加入的非任意性的成分，不是语言学符号，是象征。
反对任意性原则的学说可以称为音义关联说。证据：拟声说，右文说。
拟声不是自然语音的必要条件。声音的临摹，语序的临摹，这两种临摹方式是有限的。
右文说的本质：引申
任意性，支持材料：
同一个概念在不同的语言中声音不一样 语言中有大量的虚词、抽象词无法象声 两层性 自然语言有两种最基本的单位：
音位
区别意义的单位
语素
表达意义的单位
两层性的文化功能在于用最少的区别性表达尽可能多的符号。
两层性意味着可以用有限的手段(主要是语音)产生无限的符号形式(和有限的符号产生无限的符号组合不一样)
人类自然语音从低到高有音位层、音节层、语素层、词汇层、词组层、句子层。音位系统是区别意义层，语素系统是表达意义层。
一般认为汉语中有27个音质音位。
语音是人类社会的一部分。是我们先天还是后天的能力。即使有先天的语言能力，必须有后天的交流环境，语言系统。语言学习关键期。
CH2 语言和思维 </description>
    </item>
    
    <item>
      <title>操作系统笔记 CH13 I/O Systems</title>
      <link>https://imfaye.me/post/os13/</link>
      <pubDate>Fri, 28 Feb 2020 13:13:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os13/</guid>
      <description>the kernel is structured to use device-driver modules.
device driver为IO子系统提供了统一设备访问接口
两个趋势：接口日益标准化，设备多样性
IO 硬件 port
bus
controller
Controller usually have registers, where device driver places commands, addresses, and data to write, or read data from registers after command execution. Data-in register, data-out register, status register, control register
设备有地址
Direct I/O instructions
Memory-mapped I/O 内存映射IO
设备控制寄存器 被映射到 处理器的地址空间
Especially for large address spaces (graphics)
IO端口有4种寄存器：
status control data-in data-out Techniques for Performing I/O</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH12 Mass-Storage Structure</title>
      <link>https://imfaye.me/post/os12/</link>
      <pubDate>Fri, 28 Feb 2020 13:12:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os12/</guid>
      <description>磁盘 扇区0是最外面柱面的第一个磁道的第一个扇区。映射先按磁道内扇区顺序，再按柱面内磁道顺序，最后按从外到内的柱面顺序来排序的。
Head crash results from disk head making contact with the disk surface. Cannot be repaired, the entire disk must be replaced.
Disks can be removable
Host controller in computer uses bus to talk to disk controller built into drive or storage array.
The disk controller operates the disk-drive hardware to carry out the command.
Disk controllers have a built-in cache. Data transfer at the disk drive happens between the cache and the disk surface.</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH11 File-System Implementation</title>
      <link>https://imfaye.me/post/os11/</link>
      <pubDate>Fri, 28 Feb 2020 13:11:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os11/</guid>
      <description>文件系统结构 磁盘特点：可以原地重写，可以直接访问任意一块。
内存和磁盘之间的IO以块为单位。每块为一个或多个扇区。扇区通常为512B
File system resides on secondary storage (disks) OS通过文件系统存储、定位、提取数据
IO control 最底层
由device driver 和 Interrupt handlers组成
实现内存和磁盘之间的信息传输。
device driver可作为翻译器。输入是高层命令，输出是底层的、硬件特定的命令。命令用于控制hardware controller
device driver控制一类设备
basic file system
Issue generic commands to the appropriate device driver to read and write physical blocks on the disk.
file-organization module
将逻辑块地址 转换成 物理块地址
也包括空闲空间管理器
logical file system
管理metadata，元数据包括文件系统所有结构数据，而不包括实际数据
管理目录结构
通过FCB((inodes in UNIX))维护文件结构
负责保护和安全
Layering useful for reducing complexity and redundancy, but adds overhead and can decrease performance.</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH10 File-System Interface</title>
      <link>https://imfaye.me/post/os10/</link>
      <pubDate>Fri, 28 Feb 2020 13:10:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os10/</guid>
      <description>file concept 文件：记录在外存上的 相关信息的 具有名称的 集合，逻辑内存的最小分配单元
通常，文件表示程序和数据
free form or may be formatted rigidly
file attributes name: human-readable identifier: a unique number, non-human-readable name type location size protection time, date and user identification 文件的信息存在directory中，directory也存在外存上
A directory entry consists of the file&amp;rsquo;s name and its unique id. The id in turn locates the other file attributes.
file operations 6个基本文件操作：
create
write
write pointer
read
read pointer
A per-process current-file-position pointer
reposition</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH9 Virtual Memory</title>
      <link>https://imfaye.me/post/os9/</link>
      <pubDate>Fri, 28 Feb 2020 13:09:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os9/</guid>
      <description>background CH8的内存管理方案需要将整个进程放入内存，动态载入只能减轻这一限制
Code needs to be in memory to execute, but entire program rarely used.
execute partially-loaded program
程序不受现有物理内存大小限制，可以为virtual address space编写程序 更多程序可以同时执行，CPU利用率增加，而响应时间、周转时间不增加 载入或交换程序所需IO变少，用户程序运行更快 Virtual memory – separation of user logical memory from physical memory.
动态内存分配，堆向上增长；子程序调用，栈向下增长。包括洞的虚拟地址空间是稀地址空间。
Enables sparse address spaces with holes left for growth, dynamically linked libraries, etc.
Virtual memory allows files and memory to be shared by two or more processes through page sharing.
虚拟内存实现：
demand paging demand segmentation demand paging 按需调页 Lazy swapper: never swaps a page into memory unless that page will be needed.</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH8 Main Memory</title>
      <link>https://imfaye.me/post/os8/</link>
      <pubDate>Fri, 28 Feb 2020 13:08:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os8/</guid>
      <description>background 基本硬件 CPU可直接访问的存储器只有 内存 和 处理器内的寄存器
​	CPU内置寄存器可在一个CPU时钟周期内完成访问，对于寄存器中的内容，CPU可以在一个周期内解析并执行多个指令
​	对于内存，访存可能需要多个时钟周期。没有数据时，要暂停(stall)
协调速度差异，在CPU和内存之间，增加高速缓存cache
instruction-execution cycle: Fetch an instruction, decode instruction, fetch operands, execute, store results back into memory
为了确保正确操作，需要保护内存。
每个进程有独立空间。两个寄存器：
base register: 最小的合法物理地址 limit register: 范围的大小 CPU硬件对user mode产生的每一个地址与寄存器的地址进行比较，实现内存空间的保护。
只有OS可以通过特殊的特权指令加载base register和limit register
地址绑定 address binding 进程在执行时可以在磁盘和内存之间移动，在磁盘上等待调入内存以便执行的进程形成input queue
许多系统允许用户进程放在物理内存的任意位置，用户进程开始地址不必为0
源程序中的地址用符号表示，compiler将symbolic address绑定到relocatable address(如从本模块开始的第14字节)，linker或loader将可重定位地址绑定成absolute address。每次绑定都是从一个地址空间到另一个的映射。
将指令与数据绑定到内存地址有几种情况：
compile time
编译时就知道进程将在内存中的驻留地址，可以生成absolute code
如果将来地址发生变化，必须重新编译代码
load time
编译时不知道。编译器生成relocatable code
绑定延迟到加载时
如果开始地址发生变化，只需重新加载用户代码引入改变值
execution time
进程在执行时可以从一个内存段移到另一个内存段
绑定延迟到执行时
需要硬件(如base and limit registers)
logical vs.</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH7 Deadlocks</title>
      <link>https://imfaye.me/post/os7/</link>
      <pubDate>Fri, 28 Feb 2020 13:07:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os7/</guid>
      <description>deadlock characteristics necessary conditions 4个条件同时满足，引起死锁：
mutual exclusion
至少有一个资源处于非共享模式，一次只能有一个进程使用
hold and wait
占有至少一个资源，等待另一为其他进程所占资源
no preemption
资源不能被抢占
circular wait
resource-allocation graph request edge : Pi-&amp;gt;Rj
assignment edge : Rj-&amp;gt;Pi
申请边只用指向矩形，但分配边必须从某个原点开始
资源分配图有环是死锁的必要条件。若每类资源只有一个实例，含环是充分必要条件。若同类资源数&amp;gt;1,不一定有死锁。
methods for handling deadlocks 1.预防或避免死锁
2.允许进入死锁，检测并恢复
3.忽视这个问题(为多数OS所用)
deadlock prevention: 确保至少一个必要条件不成立，通过限制如何申请资源
deadlock avoidance: 事先得到进程申请和使用资源的额外信息，系统可确定对于一个申请，进程是否等待(申请允许还是延迟)，考虑可用、已分配、进程将来申请和释放的资源
deadlock prevention 确保4个必要条件至少1个不成立
mutual exclusion
通常不通过这个条件&amp;hellip;
hold and wait
每个进程在执行前申请并获得所有资源
进程在没有资源时才可申请资源(申请更多资源前，先释放已分配的资源)
缺点:1.资源利用率低 2.starvation
no preemption
如果一个进程占有资源并申请另一个不能立即分配的资源，其现在已分配的资源都可被抢占(被隐式释放)。
进程申请资源时，不可用也不被其他等待进程占有时，等待
常应用于状态可以保存恢复的资源，如CPU寄存器和内存，不适用于打印机和磁带驱动器等。
circular wait
对所有资源类型进行完全排序。每个进程只按递增顺序申请资源。(只能申请编号比它大的)
deadlock avoidance 死锁避免比死锁预防要求低
deadlock prevention 低设备使用率和吞吐率
a system is in a safe state only if there exists a safe sequence</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH6 Process Synchronization</title>
      <link>https://imfaye.me/post/os6/</link>
      <pubDate>Fri, 28 Feb 2020 13:06:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os6/</guid>
      <description>race condition: 多个进程并发访问和操作同一数据，结果与访问顺序有关
critical section critical section: 进程可能改变共同变量，更新表，写文件的代码段
entry section: 实现请求进入其临界区的代码段
临界区问题三要求：
mutual exclusion 同一时间临界区存在一个进程 progress 如果一个进程想进入临界区，它终将成功 bounded waiting 从一个进程做出进入临界区的请求，到该请求被允许，其他进程允许进入临界区的次数有限 kernel code可能会出现race condition
两种方法: 1.preemptive kernel 2.non-preemptive kernel 抢占内核更适合real-time programming,且更responsive
Peterson&amp;rsquo;s solution software-based solution to the critical section problem 基于软件
synchronization hardware 基于硬件
特殊硬件指令 原子地(不可中断)检查、修改、交换字内容
disable interrupt, a lock
TestAndSet()
返回的是原来的值，进入过testandset，之后就变成true
实现有限等待互斥：</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH5 CPU Scheduling</title>
      <link>https://imfaye.me/post/os5/</link>
      <pubDate>Fri, 28 Feb 2020 13:05:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os5/</guid>
      <description>dispatcher: gives control of the CPU to the process selected by the short-term scheduler;
dispatch latency
scheduling criteria CPU utilization,
throughput:
单位时间完成进程数量
turnaround time:
submission to completion
waiting time:
sum of time spent in the ready queue就绪队列
response time:
submission to first response(time it takes to start responding, not the time it takes to output the response)
scheduling algorithm FCFS first-come, first-served
non-preemptive
等待时间较长
convoy effect(短进程跟在长进程后面)
SJF shortest-job-first
shortest next CPU burst</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH4 Threads</title>
      <link>https://imfaye.me/post/os4/</link>
      <pubDate>Fri, 28 Feb 2020 13:04:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os4/</guid>
      <description>Dispatching is referred to as a thread. Resource of ownership is referred to as a process or task.
对进程的swapping和termination都牵扯它所有线程
线程是CPU使用的基本单位。由thread ID, program counter, register set, stack组成
multithreading models User threads, supported above the kernel and are managed without kernel support.
Kernel threads, supported and managed directly by the operating system.
many-to-one
one-to-one
一个线程阻塞，另一个还能运行
并发。开销大。
windows, linux, solaris 9
many-to-many
用户线程映射到数量相同或更少的内核线程
When a thread performs a blocking system call, the kernel can schedule another thread for execution.</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH3 Process</title>
      <link>https://imfaye.me/post/os3/</link>
      <pubDate>Fri, 28 Feb 2020 13:03:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os3/</guid>
      <description>process concepts batch system: job; time-sharing system: program/task
Program is passive entity stored on disk (executable file), process is active.
a process includes
text section(program code) data section(global variables) heap(动态分配的内存) process stack(临时数据) function parameters, return value return addresses local variables current activity(represented by program counter and registers) process state
new: being created running: instructions are being executed waiting/limiting: waiting for some event ready: waiting to be assigned to a processor terminated/halted: finished execution 一次只有一个进程可以在一个处理器上运行，但多个进程可处于就绪或等待状态。</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH2 OS structures</title>
      <link>https://imfaye.me/post/os2/</link>
      <pubDate>Fri, 28 Feb 2020 13:01:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os2/</guid>
      <description>UI CLI command-line / command interpreter
implemented in kernel (MS-DOS)
by systems program (Windows / UNIX)
multiple flavors implemented – shells UNIX / Linux
linux shell : shell: 带形参的批命令文件
batch interface
GUI graphical user interface
desktop, icon, Xerox PARC
system calls Programming interface to the services provided by the OS
written in high-level language
Mostly accessed by programs via a high-level Application Program Interface (API) rather than direct system call use.</description>
    </item>
    
    <item>
      <title>操作系统笔记 CH1 Intro</title>
      <link>https://imfaye.me/post/os1/</link>
      <pubDate>Fri, 28 Feb 2020 13:00:24 +0000</pubDate>
      
      <guid>https://imfaye.me/post/os1/</guid>
      <description>What OS do 操作系统是管理计算机硬件的程序
computer system: hardware, operating system, application programs, users
​	hardware: CPU, memory, I/O devices
user view services provided by OS:
program development (editors and debuggers)
program execution
access to IO devices
controlled access to files
system access
error detection and response
internal and external hardware errors
memory error, device failure
software errors
arithmetic overflow, accesss forbidden memory locations
外中断: interruption 与当前运行程序无关的事件
内中断: exception / trap 非法操作码，地址越界，算术溢出，缺页，专门陷入指令&amp;hellip;</description>
    </item>
    
    <item>
      <title>也许是什么的开始...</title>
      <link>https://imfaye.me/post/beginning/</link>
      <pubDate>Sat, 07 Sep 2019 00:23:06 +0000</pubDate>
      
      <guid>https://imfaye.me/post/beginning/</guid>
      <description>最近很迷茫呢&amp;hellip;
感觉自己不学无术&amp;hellip;
夜里12点了，在宿舍床上的电脑桌上敲我的第一篇博客。
如题，希望是什么的开始。
TBC</description>
    </item>
    
  </channel>
</rss>
